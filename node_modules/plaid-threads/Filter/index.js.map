{"version":3,"file":"index.js","sources":["../../src/Filter/helpers.ts","../../src/Filter/FilterItem.tsx","../../src/Filter/index.tsx"],"sourcesContent":["const MAX_LETTER_COUNT = 23;\n\n/**\n * Truncates a string of text\n *\n * @param {string} text - A string of text.\n * @param {number} maxCharacters -  Max set of characters before the text is truncated.\n * @return {string} Truncated text that is followed by ellipse.\n */\n\nfunction truncateText(\n  text: string,\n  maxCharacters: number = MAX_LETTER_COUNT,\n): string {\n  return (\n    text\n      .split('')\n      .slice(0, maxCharacters)\n      .join('') + '...'\n  );\n}\n\n/**\n * A number, or a string containing a number.\n *\n * @typedef {Object} Labels\n * @property {string} renderedLabel - Label the will render on screen.\n * @property {string} screenReaderLabel - Accessibility label that will be announce when using a screen reader.\n */\n\n/**\n * Outputs display and screen reader labels for Filter Item Button.\n *\n * @param {string} labels.displayLabel - The visible label which by default will show the `label` prop value.\n * @param {string} labels.label -  Accessible name for the  `Filter.Item`\n * @return {Labels} Return display and accessibility label.\n */\n\nexport function renderLabels({\n  displayLabel,\n  label,\n}: {\n  displayLabel: null | string | number | string[];\n  label: string;\n}) {\n  if (\n    typeof displayLabel === 'string' &&\n    displayLabel.split('').length > MAX_LETTER_COUNT\n  ) {\n    return {\n      renderedLabel: truncateText(displayLabel),\n      screenReaderLabel: `Applied filter for ${label} is ${displayLabel}.`,\n    };\n  }\n\n  if (typeof displayLabel === 'string') {\n    return {\n      renderedLabel: displayLabel,\n      screenReaderLabel: displayLabel + ` filter`,\n    };\n  }\n\n  if (typeof displayLabel === 'number') {\n    return {\n      renderedLabel: displayLabel.toString(),\n      screenReaderLabel: `Applied filter for ${label} is ${displayLabel}.`,\n    };\n  }\n\n  if (Array.isArray(displayLabel)) {\n    if (displayLabel.length === 0) {\n      return { renderedLabel: label, screenReaderLabel: label + ` Filter` };\n    }\n    if (displayLabel.length === 1) {\n      if (displayLabel[0].split('').length > MAX_LETTER_COUNT) {\n        return {\n          renderedLabel: `${truncateText(displayLabel[0])}`,\n          screenReaderLabel: `Applied filter for ${label} is ${displayLabel[0]}.`,\n        };\n      }\n      return {\n        renderedLabel: displayLabel[0],\n        screenReaderLabel: `Applied filter for ${label} is ${displayLabel}.`,\n      };\n    }\n\n    if (displayLabel.length > 1) {\n      const plusFilterCount = displayLabel.slice(1).length;\n      const screenReaderLabelTemplate = `Applied filters for ${label} are ${displayLabel[0]} plus ${plusFilterCount} more.`;\n\n      if (displayLabel[0].split('').length > MAX_LETTER_COUNT) {\n        return {\n          renderedLabel: `${truncateText(displayLabel[0])} +${plusFilterCount}`,\n          screenReaderLabel: screenReaderLabelTemplate,\n        };\n      }\n\n      return {\n        renderedLabel: `${displayLabel[0]} +${plusFilterCount}`,\n        screenReaderLabel: screenReaderLabelTemplate,\n      };\n    }\n  }\n  return { renderedLabel: label, screenReaderLabel: label + ` filter` };\n}\n","import React, { useState } from 'react';\nimport cx from 'classnames';\n\nimport ChevronDownS2 from '../Icons/ChevronDownS2';\nimport ChevronUpS2 from '../Icons/ChevronUpS2';\nimport Text from '../Text';\nimport Touchable from '../Touchable';\nimport Popover from '../Popover';\nimport Button from '../Button';\n\nimport { renderLabels } from './helpers';\n\nimport '../styles/_utils.scss';\nimport styles from './FilterItem.module.scss';\n\nexport interface FilterItemProps {\n  /** Children of `Filter.Item`. */\n  children: React.ReactNode;\n  /** Accessible name for the  `Filter.Item`, which will be visually hidden by default. */\n  label: string;\n  /** The visible label which by default will show the `label` prop value. It will then show the filter values when applied. */\n  displayLabel: null | string | number | string[];\n  /** Sets the `Filter.Item` to a disabled state.  */\n  disabled?: boolean;\n  /** Function that will be called when the reset button is clicked. */\n  onReset?: () => void;\n  /** Function that will be called when the apply button is clicked. */\n  onApply?: () => void;\n}\n\nconst FilerButtonLabel: React.FC<{\n  displayLabel: FilterItemProps['displayLabel'];\n  label: FilterItemProps['label'];\n  isOpen: boolean;\n}> = ({ displayLabel, label, isOpen }) => {\n  const { renderedLabel, screenReaderLabel } = renderLabels({\n    displayLabel,\n    label,\n  });\n\n  return (\n    <Text\n      size={14}\n      weight='semiBold'\n      className={cx(styles.btnText)}\n      as='span'\n      contrast='high'\n      aria-label={screenReaderLabel}\n    >\n      {renderedLabel}\n      {isOpen ? <ChevronUpS2 /> : <ChevronDownS2 />}\n    </Text>\n  );\n};\n\nexport const FilterItem: React.FC<FilterItemProps> = ({\n  children,\n  label,\n  displayLabel,\n  disabled = false,\n  onReset,\n  onApply,\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [targetElement, setTargetElement] = useState<HTMLElement | null>(null);\n\n  const isFilterActive =\n    (Array.isArray(displayLabel) && displayLabel.length !== 0) ||\n    (!Array.isArray(displayLabel) && displayLabel !== null);\n\n  return (\n    <>\n      <Touchable\n        ref={setTargetElement}\n        onClick={() => {\n          setIsOpen(!isOpen);\n        }}\n        className={cx(\n          styles.filterBtn,\n          isFilterActive && styles.isActive,\n          isOpen && styles.isExpanded,\n          disabled && styles.isDisabled,\n        )}\n        disabled={disabled}\n      >\n        <FilerButtonLabel\n          displayLabel={displayLabel}\n          label={label}\n          isOpen={isOpen}\n        />\n      </Touchable>\n      {isOpen && (\n        <Popover\n          isOpen={isOpen}\n          label={label}\n          targetElement={targetElement}\n          setOpen={() => setIsOpen(!isOpen)}\n        >\n          <Popover.Header>\n            <Text appearance='h4' as='h1' size={16} weight='semiBold'>\n              {label}\n              <span className='visually-hidden'>filter</span>\n            </Text>\n          </Popover.Header>\n          <Popover.Body>{children}</Popover.Body>\n          <Popover.Footer>\n            <Button\n              inline\n              centered\n              tertiary\n              size={32}\n              onClick={() => {\n                setIsOpen(false);\n              }}\n            >\n              Cancel <span className='visually-hidden'>filter</span>\n            </Button>\n            <Button\n              inline\n              centered\n              secondary\n              size={32}\n              onClick={() => {\n                onReset !== undefined && onReset();\n              }}\n            >\n              Reset to default <span className='visually-hidden'>filter</span>\n            </Button>\n            <Button\n              inline\n              centered\n              size={32}\n              onClick={() => {\n                onApply !== undefined && onApply();\n                setIsOpen(false);\n              }}\n            >\n              Apply <span className='visually-hidden'>filter</span>\n            </Button>\n          </Popover.Footer>\n        </Popover>\n      )}\n    </>\n  );\n};\n\nexport default FilterItem;\nexport { styles };\n","import React from 'react';\nimport cx from 'classnames';\n\nimport IconButton from '../IconButton';\nimport Reset from '../Icons/Reset';\n\nimport FilterItem, { FilterItemProps } from './FilterItem';\n\nimport styles from './FilterGroup.module.scss';\nexport interface FilterComposition {\n  Group: React.FC<Props>;\n  Item: React.FC<FilterItemProps>;\n}\nexport interface Props {\n  /** Children of `Filter.Group` which should be one or more `Filter.Item`. */\n  children:\n    | React.ReactElement<FilterItemProps>\n    | React.ReactElement<FilterItemProps>[];\n  /** Apply CSS className for `Filter` container. */\n  className?: Parameters<typeof cx>[0];\n  /** Accessible name for the `Filter.Group`, which will be visually hidden by default. */\n  label: string;\n  /** Function that will be called when the `Filter` values get reset to initial values. */\n  onReset?: () => void;\n}\n\nexport const Filter: React.FC<Props> & FilterComposition = ({\n  children,\n  className,\n  label,\n  onReset,\n}) => {\n  return (\n    <div className={cx(styles.filterGroup, className)}>\n      <div className='visually-hidden'>{label}</div>\n      {children}\n      <div>\n        <IconButton\n          accessibilityLabel='Reset All Filters'\n          icon={<Reset />}\n          onClick={() => {\n            onReset !== undefined && onReset();\n          }}\n        />\n      </div>\n    </div>\n  );\n};\n\nFilter.displayName = 'Filter';\n\nFilter.Group = Filter;\nFilter.Item = FilterItem;\n\nexport default Filter;\nexport { styles };\n"],"names":["truncateText","text","maxCharacters","split","slice","join","FilerButtonLabel","_a","displayLabel","label","isOpen","_b","length","renderedLabel","screenReaderLabel","toString","Array","isArray","plusFilterCount","screenReaderLabelTemplate","renderLabels","React","Text","size","weight","className","cx","styles","as","contrast","ChevronUpS2","ChevronDownS2","Filter","children","onReset","filterGroup","IconButton","accessibilityLabel","icon","Reset","onClick","undefined","displayName","Group","Item","disabled","onApply","_c","useState","setIsOpen","_d","targetElement","setTargetElement","isFilterActive","Touchable","ref","Popover","setOpen","Header","appearance","Body","Footer","Button","inline","centered","tertiary","secondary"],"mappings":"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"}