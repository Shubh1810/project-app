{"version":3,"file":"index.js","sources":["../../src/PhoneInput/PhoneInput.countryCodeSelectStyles.ts","../../src/PhoneInput/index.tsx"],"sourcesContent":["import reactSelectStyles from '../Select/Select.styles';\nimport { StylesConfig } from 'react-select';\nimport colors from '../styles/colors';\n\nconst units = (i: number) => `${(i * 0.8).toFixed(1)}rem`;\n\nexport const countryCodeSelectStyles: StylesConfig = {\n  ...reactSelectStyles,\n  menu: (base, state) => ({\n    ...base,\n    ...(reactSelectStyles.menu && reactSelectStyles.menu(base, state)),\n    marginTop: units(1),\n    borderTop: `1px solid ${\n      state.selectProps['errorMessage'] ? colors.red800 : colors.blue800\n    }`,\n    borderTopLeftRadius: 2,\n    borderTopRightRadius: 2,\n    width: 'auto',\n  }),\n  menuList: (base, state) => ({\n    ...base,\n    ...(reactSelectStyles.menuList && reactSelectStyles.menuList(base, state)),\n    borderTop: 'none',\n    width: 'auto',\n  }),\n  option: (base, state) => ({\n    ...base,\n    ...(reactSelectStyles.option && reactSelectStyles.option(base, state)),\n    whiteSpace: 'nowrap',\n    minWidth: '22rem',\n  }),\n};\n","import React, { FunctionComponent, useEffect, useState } from 'react';\nimport { countryCodeSelectStyles } from './PhoneInput.countryCodeSelectStyles';\nimport cx from 'classnames';\nimport {\n  AsYouType,\n  CountryCode,\n  formatIncompletePhoneNumber,\n} from 'libphonenumber-js';\n\nimport BaseInput, { InputProps } from '../BaseInput';\nimport styles from './PhoneInput.module.scss';\nimport inputStyles from '../BaseInput/BaseInput.module.scss';\nimport { SUPPORTED_COUNTRIES, Country } from '../constants';\nimport Select from '../Select';\nimport { useUniqueId } from '../utils';\nimport { createFilter } from 'react-select';\n\nexport interface Props\n  extends Pick<InputProps, Exclude<keyof InputProps, 'label' | 'onChange'>> {\n  /** Can be used to manually force OS-native select menu instead of react-select control (for testing). By default, only mobile browsers will use OS-native version. */\n  renderNativeSelect?: boolean;\n  /** A list of `Country`s to populate the country/calling code select list */\n  countryCodeList?: Country[];\n  /** Custom label for the calling code field */\n  callingCodeLabel?: string;\n  /** Custom label for the phone number field */\n  phoneNumberLabel?: string;\n  onChange: (newVal: string) => void;\n}\n\nexport const PhoneInput: FunctionComponent<Props> = ({\n  callingCodeLabel = 'Country code',\n  countryCodeList = SUPPORTED_COUNTRIES,\n  disabled,\n  id,\n  isDarkMode,\n  onChange,\n  phoneNumberLabel = 'Phone number',\n  value,\n  renderNativeSelect = /Android|webOS|iPhone|iPad|iPod|Opera Mini/i.test(\n    navigator.userAgent,\n  ),\n  ...props\n}) => {\n  const [isFocused, setIsFocused] = useState(false);\n  const uniqueCallingCodeId = useUniqueId('calling-code-input');\n  const uniquePhoneInputId = useUniqueId('phone-input');\n\n  const callingCode =\n    value == null || value.length === 0\n      ? // if input is empty / untouched, default to first calling code\n        countryCodeList[0].callingCode\n      : // else get country code from the (possibly incomplete) number\n        formatIncompletePhoneNumber(value).split(' ')[0];\n\n  const [phoneNumber, setPhoneNumber] = React.useState(\n    value?.replace(callingCode, '') || '',\n  );\n  useEffect(() => {\n    setPhoneNumber(value?.replace(callingCode, '') || '');\n  }, [value, callingCode]);\n\n  // map country codes to label/value options for select\n  const selectOptions = countryCodeList.map((c: Country) => ({\n    ...c,\n    label: `${c.icon} ${c.callingCode}`,\n    longLabel: `${c.name} ${c.callingCode}`,\n    value: c.callingCode,\n  }));\n\n  const selectValue =\n    selectOptions.find(o => o.callingCode === callingCode) || selectOptions[0];\n\n  // formatted phone number for display when input is not focused\n  const formattedPhoneNumber = new AsYouType(\n    (selectValue.code as CountryCode) || 'US',\n  ).input(phoneNumber);\n\n  const handleCallingCodeChange = (option: { value: string }): void => {\n    onChange(`${option.value}${phoneNumber.length > 0 ? phoneNumber : ''}`);\n  };\n\n  return (\n    <BaseInput\n      {...props}\n      id={id || uniquePhoneInputId}\n      value={isFocused ? phoneNumber : formattedPhoneNumber}\n      isDarkMode={isDarkMode}\n      disabled={disabled}\n      autoComplete='tel'\n      inputMode='tel'\n      type='tel'\n      onBlur={() => {\n        setIsFocused(false);\n      }}\n      onFocus={() => {\n        setIsFocused(true);\n      }}\n      onChange={({ target }) => {\n        // Remove all non-numeric characters in the phone number value\n        const sanitizedValue = target.value.replace(/[^0-9]+/g, '');\n        onChange(`${callingCode}${sanitizedValue}`);\n        setPhoneNumber(sanitizedValue);\n      }}\n      onKeyPress={e => {\n        // Accept only numbers as input\n        if (/[^0-9]/.test(e.key)) {\n          e.preventDefault();\n        }\n      }}\n      label={phoneNumberLabel}\n      className={cx(\n        styles.phoneInput,\n        !renderNativeSelect && styles.selectReplacementPhoneInput,\n      )}\n      inputClassName={styles.input}\n      labelClassName={styles.label}\n      prefixClassName={cx(\n        styles.prefix,\n        !renderNativeSelect && styles.selectReplacementPrefix,\n      )}\n      prefix={({ onFocus, onBlur }) =>\n        renderNativeSelect ? (\n          <>\n            <label\n              htmlFor={uniqueCallingCodeId}\n              className={cx(\n                inputStyles.floatLabel,\n                isDarkMode && inputStyles.floatLabelDark,\n                styles.selectLabel,\n              )}\n            >\n              {callingCodeLabel}\n            </label>\n            <select\n              className={cx(\n                inputStyles.input,\n                inputStyles.select,\n                inputStyles['prefix-input'],\n                styles.select,\n                isDarkMode && styles.selectDark,\n              )}\n              disabled={disabled}\n              id={uniqueCallingCodeId}\n              onChange={({ target }) => {\n                handleCallingCodeChange(\n                  selectOptions.find(c => c.callingCode === target.value)!,\n                );\n              }}\n              value={selectValue.value}\n            >\n              {selectOptions.map(c => (\n                <option\n                  key={c.code}\n                  value={c.callingCode}\n                  className={styles.phoneOption}\n                  aria-label={`${c.name} +${c.callingCode}`}\n                >\n                  {`${callingCode === c.callingCode ? c.icon : c.name} ${\n                    c.callingCode\n                  }`}\n                </option>\n              ))}\n            </select>\n          </>\n        ) : (\n          <Select\n            className={styles.countryCodeSelect}\n            customStyles={countryCodeSelectStyles}\n            defaultValue={selectValue}\n            disabled={disabled}\n            filterOption={createFilter({\n              matchFrom: 'any',\n              stringify: (option: any) =>\n                `${option.label} ${option.value} ${option.data.name}`,\n            })}\n            id={uniqueCallingCodeId}\n            isDarkMode={isDarkMode}\n            label={callingCodeLabel}\n            labelClassName={styles.selectReplacementLabel}\n            onFocus={onFocus}\n            onBlur={onBlur}\n            onChange={v => {\n              handleCallingCodeChange(v);\n            }}\n            value={selectValue}\n            options={selectOptions}\n            formatOptionLabel={({ longLabel, label }, { context }) => {\n              // If the option is being shown in the dropdown list, render the long version of its value,\n              // otherwise render the short version\n              return context === 'menu' ? longLabel : label;\n            }}\n          />\n        )\n      }\n    />\n  );\n};\n\nPhoneInput.displayName = 'PhoneInput';\nexport default PhoneInput;\n"],"names":["countryCodeSelectStyles","reactSelectStyles","menu","base","state","marginTop","i","toFixed","borderTop","selectProps","colors","red800","blue800","borderTopLeftRadius","borderTopRightRadius","width","menuList","option","whiteSpace","minWidth","PhoneInput","_a","_b","callingCodeLabel","_c","countryCodeList","SUPPORTED_COUNTRIES","disabled","id","isDarkMode","onChange","_d","phoneNumberLabel","value","_e","renderNativeSelect","test","navigator","userAgent","props","_f","useState","isFocused","setIsFocused","uniqueCallingCodeId","useUniqueId","uniquePhoneInputId","callingCode","length","formatIncompletePhoneNumber","split","_g","React","replace","phoneNumber","setPhoneNumber","useEffect","selectOptions","map","c","label","icon","longLabel","name","selectValue","find","o","formattedPhoneNumber","AsYouType","code","input","handleCallingCodeChange","BaseInput","autoComplete","inputMode","type","onBlur","onFocus","sanitizedValue","onKeyPress","e","key","preventDefault","className","cx","styles","inputClassName","labelClassName","prefixClassName","prefix","htmlFor","inputStyles","floatLabel","floatLabelDark","select","target","Select","customStyles","defaultValue","filterOption","createFilter","matchFrom","stringify","data","v","options","formatOptionLabel","displayName"],"mappings":"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"}