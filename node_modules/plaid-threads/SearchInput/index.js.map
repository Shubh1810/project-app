{"version":3,"file":"index.js","sources":["../../src/SearchInput/index.tsx"],"sourcesContent":["import React, { ChangeEvent, useEffect, useState } from 'react';\nimport cx from 'classnames';\nimport useUniqueId from '../utils/useUniqueId';\n\nimport styles from './SearchInput.module.scss';\nimport Search from '../Icons/Search';\nimport TextInput from '../TextInput';\nimport Button from '../Button';\nimport LoadingSpinnerNoBits from '../LoadingSpinnerNoBits';\nimport Note from '../Note';\n\nexport interface Props {\n  /** CSS classname to apply to the SearchInput container div */\n  className?: string;\n  /** Label text for the search text input */\n  label: string;\n  /** Loading state when trying to categorize/label a search query (as seen in Dashboard) */\n  isLoadingQueryLabelText?: boolean;\n  /** Used to show whether or not the current query label is valid for the current search query value (as seen in Dashboard) */\n  isQueryLabelValid?: boolean;\n  /** The label (<Note /> component) to use for the current query (if applicable) */\n  queryLabelText?: string;\n  /** Boolean to indicate when the form values are currently being submitted */\n  submitting?: boolean;\n  /** Value of the input, aka the 'search term' */\n  value: string;\n  /** Custom id for SearchInput */\n  id?: string;\n  /** Custom placeholder text for SearchInput */\n  placeholder?: string;\n  /** Handler to use when the input value changes */\n  onChange: (e: ChangeEvent<HTMLInputElement>) => void;\n  /** Handler for when the search is submitted */\n  onSubmit: (query: string) => void;\n}\n\nexport const SearchInput: React.FC<Props> = ({\n  className,\n  label = 'Search',\n  isLoadingQueryLabelText,\n  submitting,\n  queryLabelText,\n  isQueryLabelValid = true,\n  onChange,\n  onSubmit,\n  placeholder,\n  value,\n  id,\n  ...restProps\n}) => {\n  const [hasSubmitted, setHasSubmitted] = useState(false);\n\n  useEffect(() => {\n    if (submitting) {\n      setHasSubmitted(true);\n    }\n    if (isLoadingQueryLabelText) {\n      setHasSubmitted(false);\n    }\n  }, [submitting, isLoadingQueryLabelText]);\n\n  useEffect(() => {\n    setHasSubmitted(false);\n  }, [value]);\n\n  const uniqueId = useUniqueId('searchInput');\n\n  return (\n    <div className={className}>\n      <TextInput\n        {...restProps}\n        inputClassName={styles.searchTextInput}\n        aria-label='search query'\n        placeholder={placeholder}\n        prefix={() => <Search className={styles.searchIcon} />}\n        label={label}\n        id={id || uniqueId}\n        onChange={onChange}\n        onKeyPress={e => {\n          if (e.key === 'Enter') {\n            onSubmit(value);\n          }\n        }}\n        value={value}\n        iconButtons={[\n          ...(isLoadingQueryLabelText\n            ? [\n                <LoadingSpinnerNoBits\n                  className={styles.spinnerContainer}\n                  spinnerClassName={styles.spinner}\n                />,\n              ]\n            : queryLabelText\n            ? [\n                <Note\n                  className={styles.searchQueryLabel}\n                  success={isQueryLabelValid}\n                  error={!isQueryLabelValid}\n                  small\n                >\n                  {queryLabelText}\n                </Note>,\n              ]\n            : []),\n          <Button\n            className={styles.searchButton}\n            secondary\n            showLoader\n            size={32}\n            textClassName={cx(submitting && styles.textLoadingState)}\n            centered\n            inline\n            onClick={() => {\n              onSubmit(value);\n            }}\n            submitting={submitting}\n            aria-busy={submitting}\n          >\n            <span className={styles.visuallyHidden}>Perform</span> Search\n          </Button>,\n        ]}\n        iconButtonWrapperClassName={styles.iconButtonWrapper}\n      />\n      {/* The below div is for accessibility announcements only - it won't display anything on screen */}\n      <div\n        role='region'\n        aria-live='assertive'\n        className={styles.visuallyHidden}\n      >\n        {queryLabelText\n          ? `Current query ${value} matches label ${queryLabelText}.`\n          : ''}\n        {submitting\n          ? `Searching for ${value}...`\n          : hasSubmitted\n          ? `Search for ${value} complete.`\n          : ''}\n      </div>\n    </div>\n  );\n};\n\nSearchInput.displayName = 'SearchInput';\nexport default SearchInput;\nexport { styles };\n"],"names":["SearchInput","_a","className","_b","label","isLoadingQueryLabelText","submitting","queryLabelText","_c","isQueryLabelValid","onChange","onSubmit","placeholder","value","id","restProps","_d","useState","hasSubmitted","setHasSubmitted","useEffect","uniqueId","useUniqueId","React","TextInput","inputClassName","styles","searchTextInput","prefix","Search","searchIcon","onKeyPress","e","key","iconButtons","LoadingSpinnerNoBits","spinnerContainer","spinnerClassName","spinner","Note","searchQueryLabel","success","error","small","Button","searchButton","secondary","showLoader","size","textClassName","cx","textLoadingState","centered","inline","onClick","visuallyHidden","iconButtonWrapperClassName","iconButtonWrapper","role","displayName"],"mappings":"igHAoCaA,EAA+B,SAACC,GAC3C,IAAAC,cACAC,UAAAC,aAAQ,WACRC,4BACAC,eACAC,mBACAC,sBAAAC,gBACAC,aACAC,aACAC,gBACAC,UACAC,OACGC,aAZwC,oJAcrCC,EAAkCC,YAAS,GAA1CC,OAAcC,OAErBC,aAAU,WACJd,GACFa,GAAgB,GAEdd,GACFc,GAAgB,KAEjB,CAACb,EAAYD,IAEhBe,aAAU,WACRD,GAAgB,KACf,CAACN,IAEJ,IAAMQ,EAAWC,cAAY,eAE7B,OACEC,+BAAKrB,UAAWA,GACdqB,wBAACC,0BACKT,GACJU,eAAgBC,EAAOC,6BACZ,eACXf,YAAaA,EACbgB,OAAQ,WAAM,OAAAL,wBAACM,UAAO3B,UAAWwB,EAAOI,cACxC1B,MAAOA,EACPU,GAAIA,GAAMO,EACVX,SAAUA,EACVqB,WAAY,SAAAC,GACI,UAAVA,EAAEC,KACJtB,EAASE,IAGbA,MAAOA,EACPqB,+CACM7B,EACA,CACEkB,wBAACY,wBACCjC,UAAWwB,EAAOU,iBAClBC,iBAAkBX,EAAOY,WAG7B/B,EACA,CACEgB,wBAACgB,QACCrC,UAAWwB,EAAOc,iBAClBC,QAAShC,EACTiC,OAAQjC,EACRkC,UAECpC,IAGL,QACJgB,wBAACqB,UACC1C,UAAWwB,EAAOmB,aAClBC,aACAC,cACAC,KAAM,GACNC,cAAeC,UAAG5C,GAAcoB,EAAOyB,kBACvCC,YACAC,UACAC,QAAS,WACP3C,EAASE,IAEXP,WAAYA,cACDA,GAEXiB,gCAAMrB,UAAWwB,EAAO6B,2CAG5BC,2BAA4B9B,EAAO+B,qBAGrClC,+BACEmC,KAAK,qBACK,YACVxD,UAAWwB,EAAO6B,gBAEjBhD,EACG,wBAAiBM,4BAAuBN,OACxC,GACHD,EACG,wBAAiBO,SACjBK,EACA,qBAAcL,gBACd,MAMZb,EAAY2D,YAAc"}