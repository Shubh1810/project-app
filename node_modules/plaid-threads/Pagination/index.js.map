{"version":3,"file":"index.js","sources":["../../src/Pagination/index.tsx"],"sourcesContent":["import React from 'react';\nimport cx from 'classnames';\n\nimport styles from './Pagination.module.scss';\nimport Button from '../Button';\nimport IconButton from '../IconButton';\nimport ChevronLeftDoubleS1 from '../Icons/ChevronLeftDoubleS1';\nimport ChevronLeftS1 from '../Icons/ChevronLeftS1';\nimport ChevronRightDoubleS1 from '../Icons/ChevronRightDoubleS1';\nimport ChevronRightS1 from '../Icons/ChevronRightS1';\nimport Overflow from '../Icons/Overflow';\n\nexport interface Props {\n  className?: Parameters<typeof cx>[0];\n  /** The 1-based numerical index of this page within the collection of pages */\n  currentPage: number;\n  /** The total number of pages to be paginated */\n  totalPages: number;\n  /** If set to true, used to activate a minimalist layout with only First, Previous, Next, and Last controls. */\n  hidePageNumbers?: boolean;\n  onPageChange: (arg0: number) => void;\n}\n\ninterface PageButtonProps {\n  /** String to use for the aria-label prop of the page buttons (a11y) */\n  ariaLabel: string;\n  /** Value to tell the screen reader or other assistive tech that this button\n      refers to the current page. */\n  ariaCurrent: 'page' | null;\n  /** The 1-based numerical index of this page within the collection of pages */\n  pageNum: number;\n  /** Determines if the current button refers to the currently active page */\n  isCurrentPage: boolean;\n  /** Action to perform when this button is clicked */\n  onClick: () => void;\n}\n\nconst generatePageButtons = ({\n  currentPage = 1,\n  totalPages = 1,\n  onPageChange = (_: number) => {},\n}) => {\n  const pageButtons = [];\n  let needsLeadingEllipsis = true;\n  let needsTrailingEllipsis = true;\n  for (let i = 1; i < totalPages + 1; i++) {\n    if (totalPages > 7) {\n      if (\n        [\n          currentPage !== 3 && 1,\n          currentPage < 4 && 2,\n          currentPage < 4 && 3,\n          currentPage - 1 >= 0 && currentPage - 1,\n          currentPage >= totalPages - 2 && currentPage - 2,\n          currentPage >= totalPages - 1 && currentPage - 3,\n          currentPage >= totalPages && currentPage - 4,\n          currentPage,\n          currentPage + 1,\n          currentPage - 1 <= 0 && currentPage + 2,\n          currentPage <= 3 && totalPages - 2,\n          currentPage <= 3 && totalPages - 1,\n          totalPages,\n        ].indexOf(i) > -1\n      ) {\n        // If the current page number meets any of the above requirements\n        // and there are more than 7 pages, push a numbered button instance\n        // into the render queue\n        pageButtons.push(\n          <PageButton\n            key={`page-button-${i}`}\n            pageNum={i}\n            isCurrentPage={currentPage === i}\n            onClick={() => onPageChange(i)}\n            ariaCurrent={currentPage === i ? 'page' : null}\n            ariaLabel={\n              currentPage === i\n                ? `Page ${i}`\n                : `Go to page ${i} of ${totalPages}`\n            }\n          />,\n        );\n      } else {\n        // Otherwise, add an ellipsis (...) via the Overflow icon to the render queue\n        if (i > 1 && i < currentPage - 1 && needsLeadingEllipsis) {\n          pageButtons.push(\n            <Overflow className={styles.ellipsis} key={`ellipsis-${i}`} />,\n          );\n          needsLeadingEllipsis = false;\n        } else {\n          if (i <= totalPages && i > currentPage + 1 && needsTrailingEllipsis) {\n            pageButtons.push(\n              <Overflow className={styles.ellipsis} key={`ellipsis-${i}`} />,\n            );\n            needsTrailingEllipsis = false;\n          }\n        }\n      }\n    } else {\n      // If there are 7 or fewer pages, push an instance for each number, no\n      // ellipses (...) needed.\n      pageButtons.push(\n        <PageButton\n          key={`page-button-${i}`}\n          pageNum={i}\n          isCurrentPage={currentPage === i}\n          onClick={() => onPageChange(i)}\n          ariaCurrent={currentPage === i ? 'page' : null}\n          ariaLabel={\n            currentPage === i ? `Page ${i}` : `Go to page ${i} of ${totalPages}`\n          }\n        />,\n      );\n    }\n  }\n  return pageButtons;\n};\n\nconst PageButton = ({\n  ariaLabel = '',\n  ariaCurrent = null,\n  pageNum = 1,\n  isCurrentPage = false,\n  onClick = () => {},\n}: PageButtonProps) => {\n  return (\n    <Button\n      small\n      centered\n      inline\n      secondary={!isCurrentPage}\n      className={styles.pageButton}\n      onClick={onClick}\n      ariaLabel={ariaLabel}\n      aria-current={ariaCurrent}\n      tabIndex={0}\n    >\n      <span className={styles.visuallyHidden}>Page </span>\n      {pageNum}\n    </Button>\n  );\n};\n\nexport const Pagination: React.FC<Props> = props => {\n  const {\n    className,\n    onPageChange,\n    hidePageNumbers = false,\n    currentPage,\n    totalPages,\n  } = props;\n\n  return (\n    <nav aria-label='pagination' className={cx(styles.pagination, className)}>\n      <IconButton\n        accessibilityLabel={'Go to first page'}\n        className={styles.paginationArrowBackward}\n        icon={<ChevronLeftDoubleS1 />}\n        disabled={currentPage === 1}\n        tooltipText={\n          currentPage === 1\n            ? \"You're already on the first page.\"\n            : 'Go to first page'\n        }\n        onClick={() => {\n          onPageChange(1);\n        }}\n      />\n      <IconButton\n        accessibilityLabel={'Go to previous page'}\n        className={styles.paginationArrowBackward}\n        icon={<ChevronLeftS1 />}\n        disabled={currentPage === 1}\n        tooltipText={\n          currentPage === 1\n            ? \"You're already on the first page.\"\n            : 'Go to previous page'\n        }\n        onClick={() => {\n          onPageChange(currentPage - 1);\n        }}\n      />\n      {!hidePageNumbers && (\n        <div className={styles.pageButtonContainer}>\n          {generatePageButtons({ currentPage, totalPages, onPageChange })}\n        </div>\n      )}\n      <IconButton\n        accessibilityLabel={'Go to next page'}\n        className={styles.paginationArrowForward}\n        icon={<ChevronRightS1 />}\n        disabled={currentPage === totalPages}\n        onClick={() => onPageChange(currentPage + 1)}\n        tooltipText={\n          currentPage === totalPages\n            ? \"You're already on the last page.\"\n            : 'Go to next page'\n        }\n      />\n      <IconButton\n        accessibilityLabel={'Go to last page'}\n        className={styles.paginationArrowForward}\n        icon={<ChevronRightDoubleS1 />}\n        disabled={currentPage === totalPages}\n        tooltipText={\n          currentPage === totalPages\n            ? \"You're already on the last page.\"\n            : 'Go to last page'\n        }\n        onClick={() => onPageChange(totalPages)}\n      />\n    </nav>\n  );\n};\n\nPagination.displayName = 'Pagination';\nexport default Pagination;\nexport { styles };\n"],"names":["PageButton","_a","_b","ariaLabel","_c","ariaCurrent","_d","pageNum","_e","isCurrentPage","_f","onClick","React","Button","small","centered","inline","secondary","className","styles","pageButton","tabIndex","visuallyHidden","Pagination","props","onPageChange","hidePageNumbers","currentPage","totalPages","cx","pagination","IconButton","accessibilityLabel","paginationArrowBackward","icon","ChevronLeftDoubleS1","disabled","tooltipText","ChevronLeftS1","pageButtonContainer","_","pageButtons","needsLeadingEllipsis","needsTrailingEllipsis","i","indexOf","push","key","Overflow","ellipsis","generatePageButtons","paginationArrowForward","ChevronRightS1","ChevronRightDoubleS1","displayName"],"mappings":"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"}