{"version":3,"file":"index.js","sources":["../src/Table/TableGroup.tsx","../src/utils/criticalCss.ts"],"sourcesContent":["import React, { useMemo } from 'react';\nimport {\n  useTable,\n  useSortBy,\n  useRowSelect,\n  useExpanded,\n  Column,\n  CellProps,\n  HeaderGroup,\n  Row,\n  ColumnInstance,\n} from 'react-table';\nimport cx from 'classnames';\n\nimport Checkbox from '../Checkbox';\nimport IconButton from '../IconButton';\nimport Text from '../Text';\nimport Table from '.';\nimport ChevronDownS1 from '../Icons/ChevronDownS1';\nimport ChevronUpS1 from '../Icons/ChevronUpS1';\nimport LoadingSpinnerNoBits from '../LoadingSpinnerNoBits';\n\nimport useUniqueId from '../utils/useUniqueId';\n\nimport styles from './TableGroup.module.scss';\n\nexport interface Props {\n  /** Headers rendered within the table. */\n  columns: Array<Column>;\n  /** Accessible name for the Table, which will be visually hidden by default. */\n  label: string;\n  /** Data rendered within the table. */\n  rows: Array<Row>;\n  /** Call to action section that is typically an `IconButton` which would be appended at the end of row. */\n  actions?: (\n    getAllTableProps: React.PropsWithChildren<CellProps<object>>,\n  ) => JSX.Element | undefined;\n  /** Override table styles by adding a className. */\n  className?: Parameters<typeof cx>[0];\n  /** If true, the generic error state will appear. */\n  isError?: boolean;\n  /** If true, a loading spinner will appear and the table will not be interactive. */\n  isLoading?: boolean;\n  /** The value will render checkboxes and/or row expand toggle. */\n  type?: 'default' | 'selectable' | 'expandable' | 'selectable-expandable';\n  /** Content to be rendered in expanded row.  */\n  expandedRow?: (row: Row<object>) => React.ReactNode;\n}\n\nfunction hideColumns(currentType: Props['type'], hasActions: Props['actions']) {\n  const typeHiddenColumnENUM = {\n    default: ['selection', 'expander'],\n    selectable: ['expander'],\n    expandable: ['selection'],\n    'selectable-expandable': [],\n  };\n\n  return [\n    ...typeHiddenColumnENUM[currentType || 'default'],\n    hasActions === undefined ? 'actions' : '',\n  ];\n}\n\nexport const TableGroup: React.FC<Props> = ({\n  className,\n  columns,\n  rows: propRows,\n  label,\n  isError = false,\n  isLoading = false,\n  type = 'default',\n  actions = undefined,\n  expandedRow,\n}) => {\n  const isEmpty = propRows.length <= 0;\n\n  const memoColumns = useMemo(() => columns, [columns]);\n  const memoRows = useMemo(() => propRows, [propRows]);\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n    visibleColumns,\n  } = useTable(\n    {\n      columns: memoColumns,\n      data: memoRows,\n      initialState: {\n        pageIndex: 0,\n        hiddenColumns: hideColumns(type, actions),\n      },\n    },\n    useSortBy,\n    useExpanded,\n    useRowSelect,\n    hooks => {\n      hooks.visibleColumns.push((currentColumns: Array<Column>) => {\n        return [\n          {\n            id: 'expander',\n            Header: ' ',\n            disableSortBy: true,\n            Cell: ({ row, toggleAllRowsExpanded }) => {\n              return (\n                <IconButton\n                  {...row.getToggleRowExpandedProps()}\n                  onClick={() => {\n                    if (row.isExpanded === undefined) {\n                      toggleAllRowsExpanded(false);\n                    }\n                    row.toggleRowExpanded();\n                  }}\n                  accessibilityLabel={`Toggle expand row ${row.index + 1} of ${\n                    rows.length\n                  }, currently ${row.isExpanded ? 'expanded' : 'collapsed'}.`}\n                  icon={row.isExpanded ? <ChevronUpS1 /> : <ChevronDownS1 />}\n                  className={styles.expandBtn}\n                />\n              );\n            },\n          },\n          {\n            id: 'selection',\n            disableSortBy: true,\n            Header: row => {\n              const {\n                checked,\n                title,\n                ...restProps\n              } = row.getToggleAllRowsSelectedProps();\n\n              return (\n                <Checkbox\n                  {...restProps}\n                  id={useUniqueId()}\n                  value={checked || false}\n                  hideLabel={true}\n                  className={styles.checkbox}\n                  onChange={() => row.toggleAllRowsSelected()}\n                >\n                  Select all rows on this table.\n                </Checkbox>\n              );\n            },\n            Cell: ({ row: { getToggleRowSelectedProps, index, id } }) => {\n              const {\n                checked,\n                title,\n                onChange,\n                ...restProps\n              } = getToggleRowSelectedProps();\n\n              // TODO: Explore announcement of the number of selected rows after onChange: https://jira.plaid.com/browse/THREAD-910\n              return (\n                <Checkbox\n                  id={useUniqueId(id)}\n                  value={checked || false}\n                  onChange={event => onChange && onChange(event)}\n                  hideLabel={true}\n                  className={styles.checkbox}\n                  {...restProps}\n                >\n                  {`${title} row ${index + 1} of ${rows.length}`}\n                </Checkbox>\n              );\n            },\n          },\n          ...currentColumns,\n          {\n            id: 'actions',\n            Header: () => <span className={cx(styles.actions)}>Actions</span>,\n            disableSortBy: true,\n            Cell: actions === undefined ? '' : actions,\n          },\n        ];\n      });\n    },\n  );\n\n  if (isLoading) {\n    return (\n      <div className={styles.loadingGroup}>\n        <LoadingSpinnerNoBits className={styles.loader} />\n        <Text as='h2' size={16} weight='semiBold' className={styles.title}>\n          Loading\n        </Text>\n      </div>\n    );\n  }\n  // TODO: Replace with emptyState component when released\n  // https://jira.plaid.com/browse/THREAD-876\n  if (isError) {\n    return (\n      <div className={styles.unknownState}>\n        <div className={styles.group}>\n          <Text as='h2' size={16} weight='semiBold' className={styles.title}>\n            Something went wrong\n          </Text>\n          <Text>\n            There seems to be nothing that we have found. Please check back\n            later or try creating something new.\n          </Text>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <>\n      <Table\n        {...getTableProps()}\n        className={cx(styles.tableGroup, isEmpty && styles.isEmpty, className)}\n        label={label}\n      >\n        <Table.Head>\n          {headerGroups.map((headerGroup, i) => {\n            return (\n              <Table.Row {...headerGroup.getHeaderGroupProps()} key={i}>\n                {headerGroup.headers.map(\n                  (\n                    column: HeaderGroup<object> & {\n                      align?: 'start' | 'center' | 'end';\n                      setWidth?: string;\n                    },\n                  ) => {\n                    return (\n                      <Table.HeadCell\n                        {...column.getHeaderProps(\n                          column.getSortByToggleProps(),\n                        )}\n                        disableSortBy={column.disableSortBy || false}\n                        sort={\n                          column.isSorted\n                            ? column.isSortedDesc\n                              ? 'descending'\n                              : 'ascending'\n                            : 'none'\n                        }\n                        key={column.id}\n                        align={column?.align}\n                        width={column?.setWidth}\n                        className={cx(\n                          column.id === 'selection' && styles.checkboxColumn,\n                          column.id === 'expander' && styles.expanderColumn,\n                          column.id === 'actions' && styles.actionsColumn,\n                        )}\n                      >\n                        {column.render('Header')}\n                      </Table.HeadCell>\n                    );\n                  },\n                )}\n              </Table.Row>\n            );\n          })}\n        </Table.Head>\n        <Table.Body {...getTableBodyProps()}>\n          {rows.map(row => {\n            prepareRow(row);\n            return (\n              <React.Fragment key={row.id}>\n                <Table.Row {...row.getRowProps()} id={row.id}>\n                  {row.cells.map(\n                    (\n                      {\n                        getCellProps,\n                        column,\n                        render,\n                      }: {\n                        getCellProps: any;\n                        column: ColumnInstance<object> & {\n                          font?: 'sans' | 'monospace';\n                          align?: 'start' | 'center' | 'end';\n                          renderDataCell?: (\n                            cell: React.ReactNode,\n                          ) => JSX.Element;\n                        };\n                        render: (\n                          type: string,\n                          userProps?: object | undefined,\n                        ) => React.ReactNode;\n                      },\n                      i,\n                    ) => {\n                      return (\n                        <Table.Cell\n                          {...getCellProps}\n                          key={column.id + i}\n                          font={\n                            column.font === 'monospace' ? 'monospace' : 'sans'\n                          }\n                          align={column?.align}\n                          cellWrapperClassName={cx(\n                            column.id === 'expander' && styles.expanderWrapper,\n                            column.id === 'actions' && styles.actionsWrapper,\n                          )}\n                          className={cx(\n                            column.id === 'actions' && styles.actionsCell,\n                          )}\n                        >\n                          {column.renderDataCell\n                            ? column.renderDataCell(render('Cell'))\n                            : render('Cell')}\n                        </Table.Cell>\n                      );\n                    },\n                  )}\n                </Table.Row>\n                <Table.RowExpanded\n                  isExpanded={row.isExpanded}\n                  colSpan={visibleColumns.length}\n                  cellWrapperClassName={cx(\n                    type === 'selectable-expandable' &&\n                      styles.isSelectableAndExpandable,\n                    type === 'expandable' && styles.isExpandable,\n                  )}\n                >\n                  {expandedRow && expandedRow(row)}\n                </Table.RowExpanded>\n              </React.Fragment>\n            );\n          })}\n        </Table.Body>\n      </Table>\n      {isEmpty && (\n        <div className={cx(styles.unknownState)}>\n          <div className={styles.group}>\n            <Text as='h2' size={16} weight='semiBold' className={styles.title}>\n              Nothing found, please try again\n            </Text>\n            <Text>Please check try creating something new.</Text>\n          </div>\n        </div>\n      )}\n    </>\n  );\n};\n\nTableGroup.displayName = 'TableGroup';\nexport default TableGroup;\nexport { styles };\n","import * as componentStyles from './criticalCssImportMap';\n\ninterface WithInjectedGetCss {\n  _getCss: () => string;\n}\n\n/**\n * This util function should only be used by repos relying on server-side rendering (SSR) with\n * access to a post-build or distribution version of Threads. The type casting here is intentional.\n *\n * We inject a _getCss method to component stylesheets (see the `injectStyleFunctions` plugin in\n * rollup.config.js) to retrieve the post-build CSS output in order to allow repos that rely on\n * SSR (e.g. repos using NextJS) to extract post-build CSS as stylesheets and serve them from the\n * server. This is to primarily address any Flash of Unstyled Content (FOUC) issues that can come\n * with only using a dynamic load of the Threads library.\n *\n * TODO(aren): Improve upon this method by passing taking a `html` param so that we only return\n * the CSS for classnames.\n * TODO(aren): Include CSS from SCSS-only modules (e.g. Color)\n */\nexport function criticalCss(components?: string[]) {\n  const criticalStyles: Array<WithInjectedGetCss> = [];\n  // Ignore non-existant components and components that we don't have exported styles for\n  const filteredComponents =\n    components != null && components.length > 0\n      ? components.filter(component =>\n          Object.keys(componentStyles).includes(component),\n        )\n      : [];\n\n  if (filteredComponents.length > 0) {\n    filteredComponents.forEach(component => {\n      criticalStyles.push(componentStyles[component]);\n    });\n  } else {\n    // If no components were specified or if all components specified were invalid return CSS for\n    // every component\n    Object.keys(componentStyles).forEach(component => {\n      criticalStyles.push(componentStyles[component]);\n    });\n  }\n\n  // Return all critical CSS as a single string\n  return criticalStyles.map(styles => styles._getCss()).join('\\n');\n}\n"],"names":["TableGroup","_a","currentType","hasActions","className","columns","propRows","label","_b","isError","_c","isLoading","_d","type","_e","actions","undefined","expandedRow","isEmpty","length","memoColumns","useMemo","memoRows","_f","useTable","data","initialState","pageIndex","hiddenColumns","default","selectable","expandable","useSortBy","useExpanded","useRowSelect","hooks","visibleColumns","push","currentColumns","id","Header","disableSortBy","Cell","row","toggleAllRowsExpanded","React","IconButton","getToggleRowExpandedProps","onClick","isExpanded","toggleRowExpanded","accessibilityLabel","index","rows","icon","ChevronUpS1","ChevronDownS1","styles","getToggleAllRowsSelectedProps","checked","restProps","Checkbox","useUniqueId","value","hideLabel","onChange","toggleAllRowsSelected","getToggleRowSelectedProps","title","event","cx","getTableProps","getTableBodyProps","headerGroups","prepareRow","LoadingSpinnerNoBits","Text","as","size","weight","Table","Head","map","headerGroup","i","Row","getHeaderGroupProps","key","headers","column","HeadCell","getHeaderProps","getSortByToggleProps","sort","isSorted","isSortedDesc","align","width","setWidth","render","Body","Fragment","getRowProps","cells","getCellProps","font","cellWrapperClassName","renderDataCell","RowExpanded","colSpan","displayName","components","criticalStyles","filteredComponents","filter","component","Object","keys","componentStyles","includes","forEach","_getCss","join"],"mappings":"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"}