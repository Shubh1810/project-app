{"version":3,"file":"index.js","sources":["../../src/ModalBody/index.tsx"],"sourcesContent":["import React from 'react';\nimport cx from 'classnames';\n\nimport styles from './ModalBody.module.scss';\nimport { IconButton } from '../IconButton';\nimport { Button } from '../Button';\nimport { InlineLink } from '../InlineLink';\nimport { LoadingSpinner } from '../LoadingSpinner';\nimport { CloseS1 } from '../Icons';\n\nexport interface Props {\n  body?: string;\n  bodyClassName?: Parameters<typeof cx>[0];\n  cancelText?: string;\n  children?: React.ReactNode;\n  className?: Parameters<typeof cx>[0];\n  closeTimeoutMS?: number;\n  confirmText?: string;\n  header?: string;\n  img?: string;\n  imgClassName?: string;\n  isLoading?: boolean;\n  onClickCancel?: () => void;\n  onClickConfirm?: (arg: any) => void;\n}\n\nexport const ModalBody: React.FC<Props> = props => (\n  <div className={cx(styles.modalbody, props.className)}>\n    <div className={styles.close}>\n      <IconButton\n        accessibilityLabel='Navigation'\n        icon={<CloseS1 />}\n        onClick={props.onClickCancel}\n      />\n    </div>\n    <div className={cx(props.isLoading && styles.loading)}>\n      {props.isLoading ? (\n        <LoadingSpinner />\n      ) : (\n        <header className={styles.header}>\n          {props.img ? (\n            <img\n              className={cx(styles.img, props.imgClassName)}\n              src={props.img}\n              alt=''\n            />\n          ) : (\n            <></>\n          )}\n          <h4 className={styles.heading}>{props.header}</h4>\n        </header>\n      )}\n      {props.body != null && (\n        <div className={cx(styles.body, styles.bodyText, props.bodyClassName)}>\n          {props.body}\n        </div>\n      )}\n      {props.children != null && (\n        <div className={cx(styles.body, props.bodyClassName)}>\n          {props.children}\n        </div>\n      )}\n      {props.confirmText != null ? (\n        <Button wide className={styles.confirm} onClick={props.onClickConfirm}>\n          {props.confirmText}\n        </Button>\n      ) : null}\n      {props.cancelText != null ? (\n        <div className={styles.cancel}>\n          <InlineLink onClick={props.onClickCancel}>\n            {props.cancelText ? props.cancelText : 'Cancel'}\n          </InlineLink>\n        </div>\n      ) : null}\n    </div>\n  </div>\n);\n\nModalBody.displayName = 'ModalBody';\nexport default ModalBody;\nexport { styles };\n"],"names":["ModalBody","props","React","className","cx","styles","modalbody","close","IconButton","accessibilityLabel","icon","CloseS1","onClick","onClickCancel","isLoading","loading","LoadingSpinner","header","img","imgClassName","src","alt","heading","body","bodyText","bodyClassName","children","confirmText","Button","wide","confirm","onClickConfirm","cancelText","cancel","InlineLink","displayName"],"mappings":"ysPA0BaA,EAA6B,SAAAC,GAAS,OACjDC,+BAAKC,UAAWC,UAAGC,EAAOC,UAAWL,EAAME,YACzCD,+BAAKC,UAAWE,EAAOE,OACrBL,wBAACM,cACCC,mBAAmB,aACnBC,KAAMR,wBAACS,gBACPC,QAASX,EAAMY,iBAGnBX,+BAAKC,UAAWC,UAAGH,EAAMa,WAAaT,EAAOU,UAC1Cd,EAAMa,UACLZ,wBAACc,uBAEDd,kCAAQC,UAAWE,EAAOY,QACvBhB,EAAMiB,IACLhB,+BACEC,UAAWC,UAAGC,EAAOa,IAAKjB,EAAMkB,cAChCC,IAAKnB,EAAMiB,IACXG,IAAI,KAGNnB,iDAEFA,8BAAIC,UAAWE,EAAOiB,SAAUrB,EAAMgB,SAG3B,MAAdhB,EAAMsB,MACLrB,+BAAKC,UAAWC,UAAGC,EAAOkB,KAAMlB,EAAOmB,SAAUvB,EAAMwB,gBACpDxB,EAAMsB,MAGQ,MAAlBtB,EAAMyB,UACLxB,+BAAKC,UAAWC,UAAGC,EAAOkB,KAAMtB,EAAMwB,gBACnCxB,EAAMyB,UAGW,MAArBzB,EAAM0B,YACLzB,wBAAC0B,UAAOC,QAAK1B,UAAWE,EAAOyB,QAASlB,QAASX,EAAM8B,gBACpD9B,EAAM0B,aAEP,KACiB,MAApB1B,EAAM+B,WACL9B,+BAAKC,UAAWE,EAAO4B,QACrB/B,wBAACgC,cAAWtB,QAASX,EAAMY,eACxBZ,EAAM+B,WAAa/B,EAAM+B,WAAa,WAGzC,QAKVhC,EAAUmC,YAAc"}