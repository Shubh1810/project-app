{"version":3,"file":"index.js","sources":["../../src/Text/index.tsx"],"sourcesContent":["import React from 'react';\nimport cx from 'classnames';\n\nimport { capitalize, outputMarginClasses } from '../utils';\n\nimport '../styles/_utils.scss';\n\nimport styles from './Text.module.scss';\n\n/**\n * Initialized monospace and sans types since they have different attributes.\n */\n\nexport interface MonoProps {\n  /** Specify the font style that is available within the font family. */\n  font?: 'mono';\n  /** Specify the font weight that is available within the font family. */\n  weight?: 'normal' | 'bold';\n  /** Set the italic style. */\n  italic?: never;\n}\n\nexport interface SansProps {\n  /** Specify the font style that is available within the font family. */\n  font?: 'sans';\n  /** Specify the font weight that is available within the font family. */\n  weight?: 'normal' | 'medium' | 'bold' | 'semiBold' | 'extraBold';\n  /** Set the italic style. */\n  italic?: boolean;\n}\n\nexport interface TextProps {\n  /** How the text should appear, regardless of the actual tag being rendered (the `as` property). These styles will be overridden if other props have values. */\n  appearance?: 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'p' | 'small' | 'code';\n  /** The HTML tag that should be used to render the text. Styling can be overridden by the `appearance` property or any of the other properties available. */\n  as?:\n    | 'h1'\n    | 'h2'\n    | 'h3'\n    | 'h4'\n    | 'h5'\n    | 'h6'\n    | 'span'\n    | 'p'\n    | 'small'\n    | 'code';\n  /** Modify the casing of the text. */\n  casing?: 'capitalize' | 'lowercase' | 'uppercase';\n  /** The content for the Text component. */\n  children: React.ReactNode;\n  /** Add a CSS class to adjust top and bottom margin if needed.*/\n  className?: Parameters<typeof cx>[0];\n  /** Change the color shade of the text. */\n  contrast?:\n    | 'default'\n    | 'low'\n    | 'high'\n    | 'inverse-default'\n    | 'inverse-low'\n    | 'inverse-high';\n  /** Add ellipsis to text that is too long for parent container */\n  hasEllipsis?: boolean;\n  /** Apply id for `Text` container. */\n  id?: string;\n  /** Specify the margin area of all four sides of an element. */\n  m?: 0 | 0.5 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | number;\n  /** Specify the margin area on the top of an element. */\n  mt?: 0 | 0.5 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | number;\n  /** Specify the margin area on the right of an element. */\n  mr?: 0 | 0.5 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | number;\n  /** Specify the margin area on the bottom of an element. */\n  mb?: 0 | 0.5 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | number;\n  /** Specify the margin area on the left of an element. */\n  ml?: 0 | 0.5 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | number;\n  /** Specify the margin area on the left & right of an element. */\n  mx?: 0 | 0.5 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | number;\n  /** Specify the margin area on the top & bottom of an element. */\n  my?: 0 | 0.5 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | number;\n  /** Prevent text from wrapping */\n  noWrap?: boolean;\n  /** The optional ARIA role of the text element. */\n  role?: 'paragraph' | 'heading' | 'code' | 'img';\n  /** Change the size of the text. */\n  size?: 60 | 48 | 36 | 32 | 28 | 24 | 20 | 18 | 16 | 14 | 12;\n}\n\n// Intersection conditional type that depends on the font value.\nexport type Props = TextProps & (MonoProps | SansProps);\n\nexport const Text: React.FC<Props> = ({\n  as = 'p',\n  appearance = as,\n  casing,\n  children,\n  className,\n  contrast = 'default',\n  font,\n  hasEllipsis,\n  id,\n  italic,\n  m,\n  mt,\n  mr,\n  mb,\n  ml,\n  mx,\n  my,\n  noWrap,\n  role,\n  size,\n  weight,\n  ...restProps\n}) => {\n  const Component = as;\n\n  return (\n    <Component\n      className={cx(\n        // Omits the appearance className if appearance and as isn't the same.\n        appearance !== as && styles[`textAppearance${capitalize(appearance)}`],\n        font && styles[`fontFamily${capitalize(font)}`],\n        italic && styles.fontStyleItalic,\n        weight && styles[`fontWeight${capitalize(weight)}`],\n        casing && styles[`textCase${capitalize(casing)}`],\n        size && styles[`fontSize${size}`],\n        contrast && styles[`textContrast${capitalize(contrast)}`],\n        noWrap && styles.noWrap,\n        hasEllipsis && styles.ellipsis,\n        m && `m-${m}`,\n        // Checking if the value is undefined since 0 is falsy and will not output the proper class.\n        mt !== undefined && outputMarginClasses(mt, 'mt'),\n        mr !== undefined && outputMarginClasses(mr, 'mr'),\n        mb !== undefined && outputMarginClasses(mb, 'mb'),\n        ml !== undefined && outputMarginClasses(ml, 'ml'),\n        mx && `mx-${mx}`,\n        my && `my-${my}`,\n        className,\n      )}\n      id={id}\n      {...restProps}\n    >\n      {children}\n    </Component>\n  );\n};\n\nText.displayName = 'Text';\nexport default Text;\nexport { styles };\n"],"names":["Text","_a","_b","as","_c","appearance","casing","children","className","_d","contrast","font","hasEllipsis","id","italic","m","mt","mr","mb","ml","mx","my","noWrap","size","weight","restProps","Component","React","cx","styles","capitalize","fontStyleItalic","ellipsis","undefined","outputMarginClasses","displayName"],"mappings":"m9aAyFaA,EAAwB,SAACC,OACpCC,OAAAC,aAAK,MACLC,eAAAC,aAAaF,IACbG,WACAC,aACAC,cACAC,aAAAC,aAAW,YACXC,SACAC,gBACAC,OACAC,WACAC,MACAC,OACAC,OACAC,OACAC,OACAC,OACAC,OACAC,sBAEAC,SACAC,WACGC,aAtBiC,qKAwB9BC,EAAYvB,EAElB,OACEwB,wBAACD,cACClB,UAAWoB,UAETvB,IAAeF,GAAM0B,EAAO,wBAAiBC,aAAWzB,KACxDM,GAAQkB,EAAO,oBAAaC,aAAWnB,KACvCG,GAAUe,EAAOE,gBACjBP,GAAUK,EAAO,oBAAaC,aAAWN,KACzClB,GAAUuB,EAAO,kBAAWC,aAAWxB,KACvCiB,GAAQM,EAAO,kBAAWN,IAC1Bb,GAAYmB,EAAO,sBAAeC,aAAWpB,KAC7CY,GAAUO,EAAOP,OACjBV,GAAeiB,EAAOG,SACtBjB,GAAK,YAAKA,QAEHkB,IAAPjB,GAAoBkB,sBAAoBlB,EAAI,WACrCiB,IAAPhB,GAAoBiB,sBAAoBjB,EAAI,WACrCgB,IAAPf,GAAoBgB,sBAAoBhB,EAAI,WACrCe,IAAPd,GAAoBe,sBAAoBf,EAAI,MAC5CC,GAAM,aAAMA,GACZC,GAAM,aAAMA,GACZb,GAEFK,GAAIA,GACAY,GAEHlB,IAKPP,EAAKmC,YAAc"}