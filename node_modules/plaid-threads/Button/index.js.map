{"version":3,"file":"index.js","sources":["../../src/Button/index.tsx"],"sourcesContent":["import React, { MouseEvent } from 'react';\nimport cx from 'classnames';\nimport ChevronS1Right from '../Icons/ChevronS1Right';\nimport ChevronS2Right from '../Icons/ChevronS2Right';\nimport Checkmark from '../Icons/Checkmark';\nimport LoadingSpinnerNoBits from '../LoadingSpinnerNoBits';\nimport Touchable, { TouchableProps } from '../Touchable';\n\nimport styles from './Button.module.scss';\n\nexport interface Props extends Omit<TouchableProps, 'size'> {\n  animatedCaret?: boolean;\n  flexContainerClassName?: string;\n  icon?: React.ReactNode;\n  onClick?: (e: MouseEvent) => void;\n  secondary?: boolean;\n  checked?: boolean;\n  size?: 32 | 40 | 48 | 56;\n  showLoader?: boolean;\n  submitting?: boolean;\n  tertiary?: boolean;\n  textClassName?: string;\n  // deprecated props\n  large?: boolean;\n  small?: boolean;\n}\n\nexport const Button: React.ForwardRefExoticComponent<Props> = React.forwardRef(\n  (\n    {\n      animatedCaret,\n      centered,\n      checked,\n      children,\n      className,\n      disabled,\n      flexContainerClassName,\n      icon,\n      inline,\n      large,\n      role,\n      secondary,\n      showLoader,\n      size,\n      small,\n      submitting,\n      tertiary,\n      textClassName,\n      // important! props that are destructured here that Touchable\n      // still relies on must be passed to Touchable\n      ...restProps\n    },\n    ref: any,\n  ) => {\n    const showIcon = centered && icon;\n    const showCheckedIcon = !tertiary && !secondary && centered && checked;\n    return (\n      <Touchable\n        block={!inline}\n        className={cx(\n          styles.button,\n          disabled && styles.disabled,\n          inline && styles.inline,\n          (size === 56 || large) && styles.size56,\n          size === 40 && styles.size40,\n          (size === 32 || small) && styles.size32,\n          submitting && styles.submitting,\n          secondary && styles.secondary,\n          tertiary && styles.tertiary,\n          (centered || tertiary) && styles.centered,\n          className,\n        )}\n        disabled={disabled || submitting}\n        role={role ? role : 'button'}\n        inline={inline}\n        centered={centered || tertiary}\n        ref={ref}\n        {...restProps}\n      >\n        <span className={cx(styles.flex, flexContainerClassName)}>\n          {(showIcon || showCheckedIcon) && (\n            <span className={styles.leadingIcon}>\n              {showIcon ? icon : showCheckedIcon && <Checkmark />}\n            </span>\n          )}\n          {showLoader && submitting && (\n            <LoadingSpinnerNoBits\n              className={styles.spinnerContainer}\n              spinnerClassName={styles.spinner}\n              variant='single-color'\n            />\n          )}\n          <span className={cx(styles.text, textClassName)}>{children}</span>\n          {!centered && !tertiary && (\n            <span\n              className={cx(\n                styles.caret,\n                animatedCaret && styles.animatedCaret,\n              )}\n            >\n              {size === 32 || small ? (\n                <ChevronS2Right\n                  className={cx(\n                    styles.icon,\n                    animatedCaret && styles.secondaryIcon,\n                  )}\n                />\n              ) : (\n                <ChevronS1Right\n                  className={cx(\n                    styles.icon,\n                    animatedCaret && styles.secondaryIcon,\n                  )}\n                />\n              )}\n              {animatedCaret &&\n                (size === 32 || small ? (\n                  <ChevronS2Right className={styles.icon} />\n                ) : (\n                  <ChevronS1Right className={styles.icon} />\n                ))}\n            </span>\n          )}\n        </span>\n      </Touchable>\n    );\n  },\n);\n\n// Button.defaultProps = { appearance: Appearance.PRIMARY };\nButton.displayName = 'Button';\nexport default Button;\nexport { styles };\n"],"names":["Button","React","forwardRef","_a","ref","animatedCaret","centered","checked","children","className","disabled","flexContainerClassName","icon","inline","large","role","secondary","showLoader","size","small","submitting","tertiary","textClassName","restProps","showIcon","showCheckedIcon","Touchable","block","cx","styles","button","size56","size40","size32","flex","leadingIcon","Checkmark","LoadingSpinnerNoBits","spinnerContainer","spinnerClassName","spinner","variant","text","caret","ChevronS2Right","secondaryIcon","ChevronS1Right","displayName"],"mappings":"opXA2BaA,EAAiDC,UAAMC,YAClE,SACEC,EAuBAC,GAtBE,IAAAC,kBACAC,aACAC,YACAC,aACAC,cACAC,aACAC,2BACAC,SACAC,WACAC,UACAC,SACAC,cACAC,eACAC,SACAC,UACAC,eACAC,aACAC,kBAGGC,aArBL,kNAyBMC,EAAWlB,GAAYM,EACvBa,GAAmBJ,IAAaL,GAAaV,GAAYC,EAC/D,OACEN,wBAACyB,wBACCC,OAAQd,EACRJ,UAAWmB,UACTC,EAAOC,OACPpB,GAAYmB,EAAOnB,SACnBG,GAAUgB,EAAOhB,QACP,KAATK,GAAeJ,IAAUe,EAAOE,OACxB,KAATb,GAAeW,EAAOG,QACZ,KAATd,GAAeC,IAAUU,EAAOI,OACjCb,GAAcS,EAAOT,WACrBJ,GAAaa,EAAOb,UACpBK,GAAYQ,EAAOR,UAClBf,GAAYe,IAAaQ,EAAOvB,SACjCG,GAEFC,SAAUA,GAAYU,EACtBL,KAAMA,GAAc,SACpBF,OAAQA,EACRP,SAAUA,GAAYe,EACtBjB,IAAKA,GACDmB,GAEJtB,gCAAMQ,UAAWmB,UAAGC,EAAOK,KAAMvB,KAC7Ba,GAAYC,IACZxB,gCAAMQ,UAAWoB,EAAOM,aACrBX,EAAWZ,EAAOa,GAAmBxB,wBAACmC,mBAG1CnB,GAAcG,GACbnB,wBAACoC,wBACC5B,UAAWoB,EAAOS,iBAClBC,iBAAkBV,EAAOW,QACzBC,QAAQ,iBAGZxC,gCAAMQ,UAAWmB,UAAGC,EAAOa,KAAMpB,IAAiBd,IAChDF,IAAae,GACbpB,gCACEQ,UAAWmB,UACTC,EAAOc,MACPtC,GAAiBwB,EAAOxB,gBAGhB,KAATa,GAAeC,EACdlB,wBAAC2C,kBACCnC,UAAWmB,UACTC,EAAOjB,KACPP,GAAiBwB,EAAOgB,iBAI5B5C,wBAAC6C,kBACCrC,UAAWmB,UACTC,EAAOjB,KACPP,GAAiBwB,EAAOgB,iBAI7BxC,IACW,KAATa,GAAeC,EACdlB,wBAAC2C,kBAAenC,UAAWoB,EAAOjB,OAElCX,wBAAC6C,kBAAerC,UAAWoB,EAAOjB,cAWpDZ,EAAO+C,YAAc"}