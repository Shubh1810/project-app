{"version":3,"file":"index.js","sources":["../../src/IconButton/index.tsx"],"sourcesContent":["import React, { FunctionComponent } from 'react';\nimport cx from 'classnames';\nimport Touchable, { TouchableProps } from '../Touchable';\n\nimport styles from './IconButton.module.scss';\nimport Tooltip from '../Tooltip';\n\nexport interface IconButtonProps extends TouchableProps {\n  /** accessibilityLabel should provide meaningful context about button to those who rely on a screen reader to interact with the UI */\n  accessibilityLabel: string;\n  /** Optional custom text for the IconButton's tooltip. If not provided, the accessibilityLabel is used. */\n  tooltipText?: string;\n  /** If you are applying positioning styles the IconButton directly rather than via an ancestor, use this classname prop to set those positioning attributes, e.g. top, left, right, margin, etc. */\n  wrapperClassName?: string;\n  /** Apply a className to change the icon color. */\n  iconClassName?: string;\n  /** The icon to display inside the IconButton */\n  icon: React.ReactElement;\n}\n\nexport type Props = IconButtonProps;\n\nexport const IconButton: FunctionComponent<IconButtonProps> = ({\n  accessibilityLabel,\n  tooltipText,\n  className,\n  wrapperClassName,\n  iconClassName,\n  icon,\n  ...restProps\n}) => {\n  const isTouchDevice: boolean =\n    typeof matchMedia === 'function'\n      ? matchMedia('(hover: none)').matches\n      : false;\n\n  return (\n    <Tooltip\n      dark\n      placement='top'\n      showOn={isTouchDevice ? 'disabled' : ['hover', 'focus']}\n      small\n      target={\n        <Touchable\n          ariaLabel={accessibilityLabel}\n          className={cx(styles.container, className)}\n          {...restProps}\n        >\n          {React.cloneElement(icon, {\n            className: cx(styles.icon, iconClassName),\n          })}\n        </Touchable>\n      }\n      wrapperClassName={wrapperClassName}\n    >\n      {tooltipText || accessibilityLabel}\n    </Tooltip>\n  );\n};\n\nIconButton.displayName = 'IconButton';\nexport default IconButton;\nexport { styles };\n"],"names":["IconButton","_a","accessibilityLabel","tooltipText","className","wrapperClassName","iconClassName","icon","restProps","isTouchDevice","matchMedia","matches","React","Tooltip","dark","placement","showOn","small","target","Touchable","ariaLabel","cx","styles","container","cloneElement","displayName"],"mappings":"6mDAsBaA,EAAiD,SAACC,GAC7D,IAAAC,uBACAC,gBACAC,cACAC,qBACAC,kBACAC,SACGC,aAP0D,4FASvDC,EACkB,mBAAfC,YACHA,WAAW,iBAAiBC,QAGlC,OACEC,wBAACC,WACCC,QACAC,UAAU,MACVC,OAAQP,EAAgB,WAAa,CAAC,QAAS,SAC/CQ,SACAC,OACEN,wBAACO,wBACCC,UAAWlB,EACXE,UAAWiB,UAAGC,EAAOC,UAAWnB,IAC5BI,GAEHI,UAAMY,aAAajB,EAAM,CACxBH,UAAWiB,UAAGC,EAAOf,KAAMD,MAIjCD,iBAAkBA,GAEjBF,GAAeD,IAKtBF,EAAWyB,YAAc"}