{"version":3,"file":"useBreakpoints-bac94a72.js","sources":["../src/utils/hooks/useBreakpoints.ts"],"sourcesContent":["import { useState, useEffect } from 'react';\n\n// This resolves `ReferenceError: window is not defined` when using in NextJS.\nconst isBrowser = () => typeof window !== 'undefined';\n\nexport const BREAKPOINTS = {\n  SMALL_MAX_WIDTH: 480,\n  MEDIUM_MAX_WIDTH: 640,\n  LARGE_MAX_WIDTH: 960,\n  XL_MAX_WIDTH: 1440,\n};\n\nexport const LABELS = {\n  SMALL: 'small',\n  MEDIUM: 'medium',\n  LARGE: 'large',\n  XL: 'xl',\n};\n\nconst SMALL = 0;\nconst MEDIUM = 1;\nconst LARGE = 2;\nconst XL = 3;\n\nconst smallMql =\n  isBrowser() &&\n  window.matchMedia(`(max-width: ${BREAKPOINTS.SMALL_MAX_WIDTH}px)`);\n\nconst mediumMql =\n  isBrowser() &&\n  window.matchMedia(\n    `(min-width: ${BREAKPOINTS.SMALL_MAX_WIDTH + 1}px) and (max-width: ${\n      BREAKPOINTS.MEDIUM_MAX_WIDTH\n    }px)`,\n  );\nconst largeMql =\n  isBrowser() &&\n  window.matchMedia(\n    `(min-width: ${BREAKPOINTS.MEDIUM_MAX_WIDTH + 1}px) and (max-width: ${\n      BREAKPOINTS.LARGE_MAX_WIDTH\n    }px)`,\n  );\n\nconst xlMql =\n  isBrowser() &&\n  window.matchMedia(`(min-width: ${BREAKPOINTS.LARGE_MAX_WIDTH + 1}px)`);\n\n/**\n * A function which gets the current breakpoint variant.\n * Used only in this module as the lazy initial state function.\n */\nfunction getInitialVariant() {\n  // Logical AND(&&) resolves `matches' does not exist on type 'false | MediaQueryList` Typescript error\n  if (smallMql && smallMql.matches) {\n    return SMALL;\n  }\n  if (mediumMql && mediumMql.matches) {\n    return MEDIUM;\n  }\n  if (largeMql && largeMql.matches) {\n    return LARGE;\n  }\n  return XL;\n}\n\n/**\n * @typedef {Object} Breakpoints\n * @property {boolean} isSmall - Whether the small breakpoint is reached\n * @property {boolean} isMedium - Whether the medium breakpoint is reached\n * @property {boolean} isLarge - Whether the large breakpoint is reached\n * @property {boolean} isXL - Whether the large breakpoint is reached\n */\n\n/**\n * A hook which returns an enum value indicating the current matched\n * breakpoint. This module exports the enum values for the three variants\n * (SMALL, MEDIUM, LARGE, and X_LARGE), so consumers of this hook can reference the\n * matched value accordingly.\n *\n *\n * @return {Breakpoints} An object of boolean properties, e.g. `isSmall`\n */\n\nexport default function useBreakpoints() {\n  const [variant, setVariant] = useState(getInitialVariant);\n\n  useEffect(() => {\n    function handleSmall(e: MediaQueryListEvent) {\n      if (e.matches) {\n        setVariant(SMALL);\n      }\n    }\n\n    function handleMedium(e: MediaQueryListEvent) {\n      if (e.matches) {\n        setVariant(MEDIUM);\n      }\n    }\n\n    function handleLarge(e: MediaQueryListEvent) {\n      if (e.matches) {\n        setVariant(LARGE);\n      }\n    }\n    function handleXL(e: MediaQueryListEvent) {\n      if (e.matches) {\n        setVariant(LARGE);\n      }\n    }\n\n    // Logical AND(&&) resolves `Property 'addEventListener' does not exist on type 'false | MediaQueryList'.` Typescript error\n    smallMql && smallMql.addEventListener('change', handleSmall);\n    mediumMql && mediumMql.addEventListener('change', handleMedium);\n    largeMql && largeMql.addEventListener('change', handleLarge);\n    xlMql && xlMql.addEventListener('change', handleXL);\n\n    // Logical AND(&&) resolves `Property 'removeEventListener' does not exist on type 'false | MediaQueryList'.` Typescript error\n    return () => {\n      smallMql && smallMql.removeEventListener('change', handleSmall);\n      mediumMql && mediumMql.removeEventListener('change', handleMedium);\n      largeMql && largeMql.removeEventListener('change', handleLarge);\n      xlMql && xlMql.removeEventListener('change', handleXL);\n    };\n  }, []);\n\n  return {\n    isSmall: variant === SMALL,\n    isMedium: variant === MEDIUM,\n    isLarge: variant === LARGE,\n    isXL: variant === XL,\n  };\n}\n"],"names":["isBrowser","window","BREAKPOINTS","smallMql","matchMedia","mediumMql","largeMql","xlMql","getInitialVariant","matches","_a","useState","variant","setVariant","useEffect","handleSmall","e","handleMedium","handleLarge","handleXL","addEventListener","removeEventListener","isSmall","isMedium","isLarge","isXL"],"mappings":"oCAGMA,EAAY,WAAM,MAAkB,oBAAXC,QAElBC,EACM,IADNA,EAEO,IAFPA,EAGM,IAgBbC,EACJH,KACAC,OAAOG,WAAW,sBAAeF,UAE7BG,EACJL,KACAC,OAAOG,WACL,sBAAeF,EAA8B,iCAC3CA,UAGAI,EACJN,KACAC,OAAOG,WACL,sBAAeF,EAA+B,iCAC5CA,UAIAK,EACJP,KACAC,OAAOG,WAAW,sBAAeF,EAA8B,UAMjE,SAASM,IAEP,OAAIL,GAAYA,EAASM,QAlCb,EAqCRJ,GAAaA,EAAUI,QApCd,EAuCTH,GAAYA,EAASG,QAtCb,EACH,oCA8DH,IAAAC,EAAwBC,WAASH,GAAhCI,OAASC,OAyChB,OAvCAC,aAAU,WACR,SAASC,EAAYC,GACfA,EAAEP,SACJI,EAtEM,GA0EV,SAASI,EAAaD,GAChBA,EAAEP,SACJI,EA3EO,GA+EX,SAASK,EAAYF,GACfA,EAAEP,SACJI,EAhFM,GAmFV,SAASM,EAASH,GACZA,EAAEP,SACJI,EArFM,GAgGV,OANAV,GAAYA,EAASiB,iBAAiB,SAAUL,GAChDV,GAAaA,EAAUe,iBAAiB,SAAUH,GAClDX,GAAYA,EAASc,iBAAiB,SAAUF,GAChDX,GAASA,EAAMa,iBAAiB,SAAUD,GAGnC,WACLhB,GAAYA,EAASkB,oBAAoB,SAAUN,GACnDV,GAAaA,EAAUgB,oBAAoB,SAAUJ,GACrDX,GAAYA,EAASe,oBAAoB,SAAUH,GACnDX,GAASA,EAAMc,oBAAoB,SAAUF,MAE9C,IAEI,CACLG,QA3GU,IA2GDV,EACTW,SA3GW,IA2GDX,EACVY,QA3GU,IA2GDZ,EACTa,KA3GO,IA2GDb"}