{"version":3,"file":"index.js","sources":["../../src/Chart/ChartTooltip.tsx","../../src/Chart/ChartLoader.tsx","../../src/Chart/index.tsx","../../src/utils/chartUtils.ts"],"sourcesContent":["import React from 'react';\nimport {\n  AxisTypeValue,\n  Series,\n  TooltipFormatterContextObject,\n} from 'highcharts';\nimport styles from './ChartTooltip.module.scss';\nimport cx from 'classnames';\nimport Highcharts from 'highcharts';\nimport { ChartType } from 'Chart';\n\nexport interface ChartTooltipProps {\n  chartType: ChartType['type'];\n  dateFormatString: string;\n  tooltipComponent?: React.ReactElement;\n  xAxisType: AxisTypeValue;\n}\n\nexport interface TooltipSeries extends Series {\n  legendLine: {\n    d: string;\n    element: HTMLElement;\n  };\n  legendSymbol: {\n    d?: string;\n    element: HTMLElement;\n  };\n  colorIndex: number;\n}\n\nconst TooltipHeader = ({\n  dateFormatString,\n  xAxisType,\n  xVal,\n}: {\n  dateFormatString: string;\n  xAxisType: AxisTypeValue;\n  xVal: string | number | undefined;\n}) => {\n  let tooltipTitle = '';\n\n  switch (xAxisType) {\n    case 'datetime':\n      tooltipTitle = xVal\n        ? `${Highcharts.dateFormat(dateFormatString, xVal as number)}`\n        : '';\n      break;\n    case 'linear':\n      tooltipTitle = `Day ${xVal}`;\n      break;\n    default:\n      tooltipTitle = `${xVal}`;\n      break;\n  }\n  return <div className={styles.tooltipHeader}>{tooltipTitle}</div>;\n};\n\nconst LegendLineSVG = ({ pathData }: { pathData: string }) => (\n  <path d={pathData} className='highcharts-graph' />\n);\n\n// Base stroke width for legend symbol\nconst STROKE_WIDTH = 1;\n// Stroke width with some offset to ensure antialiasing doesn't get clipped (0.1 on each side)\nconst STROKE_WIDTH_MINUS_ANTIALIASING = STROKE_WIDTH - 0.2;\n\nconst LegendSymbolSVG = ({\n  legendSymbolElement,\n  pathData,\n}: {\n  legendSymbolElement: HTMLElement;\n  pathData?: string;\n}) => {\n  const symbolRadius =\n    parseInt(legendSymbolElement.getAttribute('width') || '') / 2 - 1;\n  const centerX =\n    parseInt(legendSymbolElement.getAttribute('x') as string) +\n    symbolRadius +\n    STROKE_WIDTH_MINUS_ANTIALIASING;\n  const centerY =\n    parseInt(legendSymbolElement.getAttribute('y') as string) +\n    symbolRadius +\n    STROKE_WIDTH_MINUS_ANTIALIASING;\n  return legendSymbolElement.tagName === 'rect' ? (\n    <circle\n      r={symbolRadius.toString()}\n      className='highcharts-point'\n      cx={centerX.toString()}\n      cy={centerY.toString()}\n    />\n  ) : (\n    <path d={pathData} className='highcharts-point' />\n  );\n};\n\nexport const ChartTooltip = ({\n  tooltipComponent,\n  chartType,\n  xAxisType,\n  dateFormatString,\n  ...tooltipProps\n}: ChartTooltipProps & TooltipFormatterContextObject): JSX.Element => {\n  if (tooltipComponent) {\n    return React.cloneElement(tooltipComponent, { ...tooltipProps });\n  }\n\n  return (\n    <div className={cx(styles.tooltipTable, `highcharts-${chartType}-series`)}>\n      <TooltipHeader\n        xAxisType={xAxisType}\n        xVal={tooltipProps.x}\n        dateFormatString={dateFormatString}\n      />\n      {(tooltipProps.points as TooltipFormatterContextObject[]).map(\n        (point: TooltipFormatterContextObject, idx: number): JSX.Element => {\n          // A couple of the props we use don't have TS support from\n          // Highcharts' definitions as of yet, so we wrap the native\n          // Series type with those missing props\n          const series = point.series as TooltipSeries;\n          const legendLine = series.legendLine;\n          const legendSymbolElement =\n            series.legendSymbol && series.legendSymbol.element;\n\n          return (\n            <div className={styles.tooltipRow} key={`tooltip-row-${idx}`}>\n              <div className={styles.tooltipColumn}>\n                <div className={`highcharts-color-${series.colorIndex}`}>\n                  <svg\n                    xmlns='http://www.w3.org/2000/svg'\n                    viewBox='0 0 24 12'\n                    className={styles.tooltipMarkerSymbol}\n                  >\n                    {legendLine && <LegendLineSVG pathData={legendLine.d} />}\n                    {legendSymbolElement && (\n                      <LegendSymbolSVG\n                        legendSymbolElement={legendSymbolElement}\n                        pathData={series.legendSymbol.d}\n                      />\n                    )}\n                  </svg>\n                </div>\n                <div className={styles.pointSeriesName}>\n                  {point.series.name}\n                </div>\n              </div>\n              <div className={styles.tooltipColumn}>\n                <span className={styles.pointValue}>\n                  {point.y?.toLocaleString()}\n                </span>\n              </div>\n            </div>\n          );\n        },\n      )}\n    </div>\n  );\n};\n","import React from 'react';\nimport cx from 'classnames';\n\nimport styles from './ChartLoader.module.scss';\n\nexport const ChartLoader = () => (\n  <div className={styles.loader} role='alert' aria-busy>\n    <div className={styles.pulseContainer}>\n      <div className={styles.pulse} />\n      <div className={cx(styles.pulse, styles.secondPulse)} />\n    </div>\n  </div>\n);\n","import React, { useEffect, useRef, useState } from 'react';\nimport * as ReactDOMServer from 'react-dom/server';\nimport cx from 'classnames';\n\nimport Highcharts, {\n  AxisTypeValue,\n  Options,\n  Point,\n  SeriesLineOptions,\n  SeriesColumnOptions,\n} from 'highcharts';\n\nimport { ChartTooltip } from './ChartTooltip';\nimport { ChartLoader } from './ChartLoader';\n\nimport HighchartsReact from 'highcharts-react-official';\nimport highchartsAccessibility from 'highcharts/modules/accessibility';\nimport highchartsExportData from 'highcharts/modules/export-data';\nimport highchartsExport from 'highcharts/modules/exporting';\nimport highchartsNoData from 'highcharts/modules/no-data-to-display';\nimport styles from './Chart.module.scss';\n\nimport { removeExcessMarkers } from '../utils/chartUtils';\n\n// Wait until Highcharts is completely loaded to init extension modules in order to avoid errors.\nif (typeof Highcharts === 'object') {\n  highchartsAccessibility(Highcharts);\n  highchartsExport(Highcharts);\n  highchartsExportData(Highcharts);\n  highchartsNoData(Highcharts);\n}\n\nexport interface ChartType {\n  /** Type of chart: currently only line and column (bar) are supported. */\n  type: 'line' | 'column';\n}\n\nexport interface ChartComponentProps {\n  /** Classname for the Chart component container div */\n  className?: Parameters<typeof cx>[0];\n  /** The data used to draw the chart */\n  data: {\n    start?: string;\n    end?: string;\n    series: SeriesLineOptions[] | SeriesColumnOptions[];\n  };\n  /** Remove clickability of legend for non-interactive use-cases */\n  disableLegendClick?: boolean;\n  /** Hide point markers on line series charts */\n  hideMarkers?: boolean;\n  /** Loading state of chart, determines when loader shows */\n  isLoading?: boolean;\n  /** Message to display when there's no data to show for a given chart configuration */\n  noDataMessage?: string;\n  /** Interval between points on the x-axis of timeseries charts */\n  pointInterval?: 'hour' | 'day' | 'week' | 'month';\n  /** Function to pass chart context to parent for use with filter controls -- only used with ChartGroup */\n  setChart?: (arg0: any) => void;\n  /** Amount of time displayed in the chart dataset. */\n  timeRange?: 'day' | 'week' | 'month' | 'year';\n  /** Custom tooltip component to use with chart if desired. Gets passed the tooltip context. */\n  tooltipComponent?: React.ReactElement;\n  /** Type of x-axis, e.g. 'linear' or 'datetime' */\n  xAxisType?: Exclude<AxisTypeValue, 'logarithmic' | 'treegrid'>;\n}\n\nexport interface ChartConfigProps {\n  /** Optional custom label for the x-axis */\n  xAxisLabel?: string;\n  /** Optional custom label for the y-axis */\n  yAxisLabel?: string;\n}\n\nexport type ChartProps = ChartConfigProps & ChartComponentProps;\n\nconst pointIntervals = {\n  hour: 60 * 60 * 1000, // 1 hour in milliseconds\n  day: 24 * 60 * 60 * 1000, // 1 day\n  month: 30 * 24 * 60 * 60 * 1000, // 1 month\n};\n\nexport const Chart: React.FC<ChartType & ChartProps> = ({\n  className,\n  data,\n  disableLegendClick,\n  hideMarkers = false,\n  isLoading,\n  noDataMessage,\n  pointInterval = 'day',\n  setChart,\n  timeRange,\n  tooltipComponent,\n  type: chartType,\n  xAxisLabel,\n  xAxisType = 'datetime',\n  yAxisLabel,\n}) => {\n  Highcharts.SVGRenderer.prototype.symbols.overflow = () => [\n    'M2 1C2 1.55228 1.55228 2 1 2C0.447715 2 0 1.55228 0 1C0 0.447715 0.447715 0 1 0C1.55228 0 2 0.447715 2 1Z',\n    'M7 2C7.55228 2 8 1.55228 8 1C8 0.447715 7.55228 0 7 0C6.44772 0 6 0.447715 6 1C6 1.55228 6.44772 2 7 2Z',\n    'M13 2C13.5523 2 14 1.55228 14 1C14 0.447715 13.5523 0 13 0C12.4477 0 12 0.447715 12 1C12 1.55228 12.4477 2 13 2Z',\n  ];\n\n  const chartRef = useRef<HighchartsReact.RefObject>(null);\n\n  const isYearByMonth = timeRange === 'year' && pointInterval === 'month';\n\n  let dateFormatString = '';\n\n  switch (pointInterval) {\n    case 'hour':\n      if (timeRange === 'day') {\n        dateFormatString = '%l%P';\n      } else {\n        dateFormatString = '%A, %B %e, %l%P';\n      }\n      break;\n    case 'day':\n    case 'week':\n      dateFormatString = '%A, %B %e';\n      break;\n    case 'month':\n      dateFormatString = '%B %Y';\n      break;\n  }\n\n  const [chartOptions, setChartOptions] = useState<Options>({\n    // https://api.highcharts.com/highcharts/accessibility\n    accessibility: {\n      enabled: true,\n    },\n    // https://api.highcharts.com/highcharts/chart\n    chart: {\n      marginLeft: 60,\n      marginTop: 80,\n      spacingLeft: 0,\n      styledMode: true,\n      type: chartType,\n    },\n    // https://api.highcharts.com/highcharts/credits\n    credits: {\n      enabled: false,\n    },\n    // https://api.highcharts.com/highcharts/exporting\n    exporting: {\n      buttons: {\n        contextButton: {\n          menuItems: [\n            'viewFullscreen',\n            'viewData',\n            'downloadCSV',\n            'downloadPNG',\n            'downloadJPEG',\n            'downloadPDF',\n          ],\n          symbol: 'overflow',\n          text: 'Actions',\n        },\n      },\n      chartOptions: {\n        chart: {\n          className: 'chart-export',\n          marginLeft: 80,\n        },\n      },\n      enabled: true,\n      sourceWidth: 800,\n    },\n    // https://api.highcharts.com/highcharts/legend\n    legend: {\n      align: 'left',\n      padding: 0,\n      verticalAlign: 'top',\n    },\n    // https://api.highcharts.com/highcharts/plotOptions\n    plotOptions: {\n      column: {\n        accessibility: {\n          keyboardNavigation: {\n            enabled: true,\n          },\n        },\n        groupPadding: 0.2,\n      },\n      series: {\n        accessibility: {\n          keyboardNavigation: {\n            enabled: true,\n          },\n        },\n      },\n    },\n    title: {\n      align: 'left',\n      text: '',\n      floating: true,\n    },\n    tooltip: {\n      positioner: (labelWidth: number, labelHeight: number, point: Point) => {\n        const chartPadding = 20;\n        if (point.plotX === undefined) {\n          return { x: 0, y: 0 };\n        }\n        const { plotWidth, plotLeft } = chartRef.current\n          ? chartRef.current['chart']\n          : { plotWidth: 0, plotLeft: 0 };\n        let xPos = point.plotX + plotLeft + chartPadding;\n        if (xPos + plotLeft + labelWidth > plotWidth) {\n          xPos = Math.max(\n            50,\n            point.plotX + plotLeft - labelWidth - chartPadding,\n          );\n        }\n        return { x: xPos, y: 20 };\n      },\n      shared: true,\n      useHTML: true,\n    },\n    xAxis: {\n      crosshair: true,\n      labels: {\n        y: 24,\n      },\n      tickLength: 8,\n    },\n    ...data,\n  });\n\n  useEffect(() => {\n    setChart && chartRef.current && setChart(chartRef.current.chart);\n  }, [chartRef, setChart]);\n\n  useEffect(() => {\n    // lang dynamic options\n    setChartOptions(prevChartOptions => {\n      return {\n        ...prevChartOptions,\n        lang: {\n          noData:\n            noDataMessage ||\n            'No data display. Check your time range and/or filter settings and try again.',\n        },\n      };\n    });\n    if (chartRef.current) {\n      // @ts-ignore Turn off default 'no data' messaging in favor of our own\n      chartRef.current.chart.hideNoData();\n    }\n  }, [noDataMessage]);\n\n  useEffect(() => {\n    // xAxis dynamic options\n    setChartOptions((prevChartOptions: Options) => {\n      const prevXAxisOptions = prevChartOptions.xAxis || {};\n      return {\n        ...prevChartOptions,\n        xAxis: {\n          ...prevXAxisOptions,\n          dateTimeLabelFormats: {\n            hour: '%l%P',\n            day: timeRange === 'week' ? '%a' : '%e',\n            week: '%b %e',\n            month: '%b',\n          },\n          tickInterval:\n            xAxisType === 'datetime'\n              ? isYearByMonth\n                ? undefined\n                : pointIntervals[pointInterval]\n              : 1,\n          title: {\n            margin: 16,\n            text:\n              xAxisLabel ||\n              (timeRange &&\n                `${timeRange[0].toUpperCase()}${timeRange?.slice(1)}`) ||\n              'Date',\n          },\n          type: xAxisType\n            ? xAxisType\n            : chartType === 'line'\n            ? 'linear'\n            : 'category',\n        },\n      };\n    });\n  }, [\n    timeRange,\n    xAxisLabel,\n    xAxisType,\n    isYearByMonth,\n    pointInterval,\n    chartType,\n  ]);\n\n  useEffect(() => {\n    setChartOptions(prevChartOptions => {\n      return {\n        ...prevChartOptions,\n        yAxis: {\n          ...prevChartOptions.yAxis,\n          title: {\n            text: yAxisLabel || 'Count',\n          },\n        },\n      };\n    });\n  }, [yAxisLabel]);\n\n  useEffect(() => {\n    // legend dynamic options\n    setChartOptions(prevChartOptions => {\n      return {\n        ...prevChartOptions,\n        legend: {\n          ...prevChartOptions.legend,\n          className: `highcharts-no-tooltip${\n            disableLegendClick ? ' legend-disabled' : ''\n          }`,\n        },\n      };\n    });\n  }, [disableLegendClick]);\n\n  useEffect(() => {\n    // chart dynamic options\n    setChartOptions(prevChartOptions => {\n      return {\n        ...prevChartOptions,\n        chart: {\n          ...prevChartOptions.chart,\n          type: chartType,\n          events: {\n            render: () =>\n              removeExcessMarkers({ chartRef, chartType, hideMarkers }),\n          },\n        },\n      };\n    });\n  }, [chartType, hideMarkers, data]);\n\n  useEffect(() => {\n    // tooltip dynamic options\n    setChartOptions(prevChartOptions => {\n      return {\n        ...prevChartOptions,\n        tooltip: {\n          ...prevChartOptions.tooltip,\n          formatter: function() {\n            // The formatter function is expected to return a string, so we use\n            // renderToString to give it what it wants.\n            return ReactDOMServer.renderToString(\n              <ChartTooltip\n                {...this}\n                chartType={chartType}\n                tooltipComponent={tooltipComponent}\n                xAxisType={xAxisType}\n                dateFormatString={dateFormatString}\n              />,\n            );\n          },\n        },\n      };\n    });\n  }, [chartType, tooltipComponent, xAxisType, dateFormatString]);\n\n  useEffect(() => {\n    // plotOptions dynamic options\n    if (!data || !data.start) {\n      return;\n    }\n    setChartOptions(prevChartOptions => {\n      const prevPlotOptions = prevChartOptions.plotOptions || {};\n\n      return {\n        ...prevChartOptions,\n        plotOptions: {\n          ...prevPlotOptions,\n          series: {\n            ...prevPlotOptions.series,\n            events: {\n              legendItemClick: e => {\n                if (disableLegendClick) {\n                  e.preventDefault();\n                }\n              },\n            },\n            marker: {\n              enabled: !hideMarkers,\n            },\n            pointStart:\n              xAxisType === 'datetime' && data.start\n                ? Date.parse(data.start)\n                : 1,\n            pointInterval: isYearByMonth\n              ? undefined\n              : xAxisType === 'datetime'\n              ? pointIntervals[pointInterval]\n              : 1,\n            pointIntervalUnit: pointInterval === 'month' ? 'month' : undefined,\n          },\n        },\n        ...data,\n      };\n    });\n  }, [\n    disableLegendClick,\n    hideMarkers,\n    xAxisType,\n    isYearByMonth,\n    pointInterval,\n    data,\n  ]);\n\n  return (\n    <div className={cx(styles.chart, className)}>\n      {isLoading ? (\n        <ChartLoader />\n      ) : (\n        <HighchartsReact\n          highcharts={Highcharts}\n          options={chartOptions}\n          ref={chartRef}\n        />\n      )}\n    </div>\n  );\n};\n\nChart.displayName = 'Chart';\nexport default Chart;\nexport { styles };\n","import { ChartType } from '../Chart';\nimport { Series, Point } from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\n\nexport interface MarkerProps {\n  chartRef: {\n    current: HighchartsReact.RefObject | null;\n  };\n  chartType: ChartType['type'];\n  hideMarkers: boolean;\n}\n\n// Function to only show every X markers (determined by `maxPointsBeforeSelectiveHiding` below)\nexport const removeExcessMarkers = ({\n  chartRef,\n  chartType,\n  hideMarkers,\n}: MarkerProps) => {\n  if (\n    chartRef.current == null ||\n    chartRef.current.chart == null ||\n    hideMarkers\n  ) {\n    return;\n  }\n\n  // Max points a series can have before the below function takes effect.\n  const maxPointsBeforeSelectiveHiding = 100;\n\n  const chartInstance: Highcharts.Chart = chartRef.current.chart;\n  if (chartType === 'line' && chartInstance.series.length > 0) {\n    for (let i = 0; i < chartInstance.series.length; i++) {\n      const currentSeries: Series = chartInstance.series[i];\n      const points: Point[] = currentSeries.points;\n      if (points.length === 0 || points.length < maxPointsBeforeSelectiveHiding)\n        continue;\n      for (let j = 1; j < points.length; j++) {\n        // Total number of points desired on the chart.\n        // Actual number shown may be slightly off due to divisibility of number of points,\n        // and the fact that we want a marker on the first and last points always.\n        const density = 10;\n        const point = points[j];\n        if (j % Math.floor(points.length / density) > 0 && j < points.length) {\n          // Can't seem to find the correct typing for `points[j]`\n          // under which `graphic` exists, but the code works.\n          // @ts-ignore\n          point.graphic.hide();\n        }\n      }\n    }\n  }\n};\n"],"names":["TooltipHeader","_a","dateFormatString","xAxisType","xVal","tooltipTitle","Highcharts","dateFormat","React","className","styles","LegendLineSVG","pathData","d","LegendSymbolSVG","legendSymbolElement","symbolRadius","parseInt","getAttribute","centerX","STROKE_WIDTH","centerY","tagName","r","toString","cx","cy","ChartTooltip","tooltipComponent","chartType","tooltipProps","cloneElement","x","points","map","point","idx","series","legendLine","legendSymbol","element","key","colorIndex","xmlns","viewBox","name","y","toLocaleString","ChartLoader","role","highchartsAccessibility","highchartsExport","highchartsExportData","highchartsNoData","pointIntervals","hour","day","month","Chart","data","disableLegendClick","_b","hideMarkers","isLoading","noDataMessage","_c","pointInterval","setChart","timeRange","xAxisLabel","_d","yAxisLabel","SVGRenderer","prototype","symbols","overflow","chartRef","useRef","isYearByMonth","_e","useState","accessibility","enabled","chart","marginLeft","marginTop","spacingLeft","styledMode","type","credits","exporting","buttons","contextButton","menuItems","symbol","text","chartOptions","sourceWidth","legend","align","padding","verticalAlign","plotOptions","column","keyboardNavigation","groupPadding","title","floating","tooltip","positioner","labelWidth","labelHeight","undefined","plotX","current","plotWidth","plotLeft","xPos","Math","max","shared","useHTML","xAxis","crosshair","labels","tickLength","setChartOptions","useEffect","prevChartOptions","lang","noData","hideNoData","prevXAxisOptions","dateTimeLabelFormats","week","tickInterval","margin","toUpperCase","slice","yAxis","events","render","chartInstance","length","i","j","floor","graphic","hide","removeExcessMarkers","formatter","ReactDOMServer","renderToString","this","start","prevPlotOptions","legendItemClick","e","preventDefault","marker","pointStart","Date","parse","pointIntervalUnit","HighchartsReact","highcharts","options","ref","displayName"],"mappings":"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"}