import React from 'react';
import cx from 'classnames';
import { AxisTypeValue, SeriesLineOptions, SeriesColumnOptions } from 'highcharts';
import styles from './Chart.module.scss';
export interface ChartType {
    /** Type of chart: currently only line and column (bar) are supported. */
    type: 'line' | 'column';
}
export interface ChartComponentProps {
    /** Classname for the Chart component container div */
    className?: Parameters<typeof cx>[0];
    /** The data used to draw the chart */
    data: {
        start?: string;
        end?: string;
        series: SeriesLineOptions[] | SeriesColumnOptions[];
    };
    /** Remove clickability of legend for non-interactive use-cases */
    disableLegendClick?: boolean;
    /** Hide point markers on line series charts */
    hideMarkers?: boolean;
    /** Loading state of chart, determines when loader shows */
    isLoading?: boolean;
    /** Message to display when there's no data to show for a given chart configuration */
    noDataMessage?: string;
    /** Interval between points on the x-axis of timeseries charts */
    pointInterval?: 'hour' | 'day' | 'week' | 'month';
    /** Function to pass chart context to parent for use with filter controls -- only used with ChartGroup */
    setChart?: (arg0: any) => void;
    /** Amount of time displayed in the chart dataset. */
    timeRange?: 'day' | 'week' | 'month' | 'year';
    /** Custom tooltip component to use with chart if desired. Gets passed the tooltip context. */
    tooltipComponent?: React.ReactElement;
    /** Type of x-axis, e.g. 'linear' or 'datetime' */
    xAxisType?: Exclude<AxisTypeValue, 'logarithmic' | 'treegrid'>;
}
export interface ChartConfigProps {
    /** Optional custom label for the x-axis */
    xAxisLabel?: string;
    /** Optional custom label for the y-axis */
    yAxisLabel?: string;
}
export declare type ChartProps = ChartConfigProps & ChartComponentProps;
export declare const Chart: React.FC<ChartType & ChartProps>;
export default Chart;
export { styles };
//# sourceMappingURL=index.d.ts.map