{"version":3,"file":"index.js","sources":["../../src/Navigation/NavigationContext.tsx","../../src/Navigation/NavigationHeader.tsx","../../src/Navigation/NavigationBody.tsx","../../src/Navigation/NavigationFooter.tsx","../../src/Navigation/NavigationAvatar.tsx","../../src/Navigation/NavigationProfileSwitcher.tsx","../../src/Navigation/NavigationItem.tsx","../../src/Navigation/NavigationDrillIn.tsx","../../src/Navigation/index.tsx","../../src/Navigation/NavigationGroup.tsx","../../src/Navigation/helpers.ts"],"sourcesContent":["import { createContext, useContext } from 'react';\n\nexport interface NavContextInterface {\n  isCollapsed: boolean;\n  toggleCollapse: () => void;\n  isMobileNavOpen: boolean;\n  toggleMobileNav: () => void;\n}\n\nexport const NavContext = createContext<NavContextInterface>({\n  isCollapsed: false,\n  toggleCollapse: () => {},\n  isMobileNavOpen: false,\n  toggleMobileNav: () => {},\n});\n\nexport function useNavContext(): NavContextInterface {\n  return useContext(NavContext);\n}\n","import React from 'react';\nimport cx from 'classnames';\n\nimport IconButton from '../IconButton';\n\nimport CloseS1 from '../Icons/CloseS1';\nimport MenuS2 from '../Icons/MenuS2';\nimport SidebarHide from '../Icons/SidebarHide';\nimport SidebarShow from '../Icons/SidebarShow';\n\nimport useBreakpoints from '../utils/hooks/useBreakpoints';\nimport { useNavContext } from './NavigationContext';\n\nimport styles from './NavigationHeader.module.scss';\n\nexport interface NavigationHeaderProps {\n  /** Children should contain a `Navigation.Switcher`.  */\n  children?: React.ReactNode;\n  /** Apply CSS class to the container. */\n  className?: Parameters<typeof cx>[0];\n}\n\nexport const NavigationHeader: React.FC<NavigationHeaderProps> = ({\n  children,\n  className,\n}) => {\n  const {\n    isCollapsed,\n    toggleCollapse,\n    isMobileNavOpen,\n    toggleMobileNav,\n  } = useNavContext();\n\n  // TODO: Refactor to CSS media queries instead of useBreakpoints.\n  // https://jira.plaid.com/browse/THREAD-1163\n  const { isSmall } = useBreakpoints();\n\n  return (\n    <div className={cx(styles.navHeader, className)}>\n      {!isCollapsed && children}\n      <div className={styles.menuWrapper}>\n        {!isSmall && (\n          <IconButton\n            accessibilityLabel={isCollapsed ? 'Expand Menu' : 'Collapse Menu'}\n            icon={isCollapsed ? <SidebarShow /> : <SidebarHide />}\n            onClick={toggleCollapse}\n          />\n        )}\n        {isSmall && (\n          <IconButton\n            accessibilityLabel={\n              !isMobileNavOpen ? 'Expand Menu' : 'Collapse Menu'\n            }\n            icon={isMobileNavOpen ? <CloseS1 /> : <MenuS2 />}\n            onClick={toggleMobileNav}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default NavigationHeader;\nexport { styles };\n","import React from 'react';\nimport cx from 'classnames';\n\nimport styles from './NavigationBody.module.scss';\n\nexport interface NavigationBodyProps {\n  /** Children should contain `Navigation.Group`, `Navigation.Item`, and/or `Navigation.DrillIn`.  */\n  children?: React.ReactNode;\n  /** Apply CSS class to the container. */\n  className?: Parameters<typeof cx>[0];\n}\n\nexport const NavigationBody: React.FC<NavigationBodyProps> = ({\n  children,\n  className,\n}) => <nav className={cx(styles.navBody, className)}>{children}</nav>;\n\nexport default NavigationBody;\nexport { styles };\n","import React from 'react';\nimport cx from 'classnames';\n\nimport { useNavContext } from './NavigationContext';\n\nimport styles from './NavigationFooter.module.scss';\n\nexport interface NavigationFooterProps {\n  /** Content for the `Navigation.Footer`.  */\n  children?: React.ReactNode;\n  /** Apply CSS class to the container. */\n  className?: Parameters<typeof cx>[0];\n  /** Icon that appears after the footer's content. */\n  icon?: React.ReactNode;\n}\n\nexport const NavigationFooter: React.FC<NavigationFooterProps> = ({\n  children,\n  className,\n  icon,\n}) => {\n  const { isCollapsed } = useNavContext();\n  return (\n    <div\n      className={cx(\n        styles.navFooter,\n        icon && styles.hasIcon,\n        isCollapsed && styles.isCollapsed,\n        className,\n      )}\n    >\n      <div>{children}</div>\n      {icon && !isCollapsed && (\n        <div className={cx(styles.iconContainer)}>{icon}</div>\n      )}\n    </div>\n  );\n};\n\nexport default NavigationFooter;\nexport { styles };\n","import React from 'react';\nimport cx from 'classnames';\n\nimport Text from '../Text';\n\nimport { useNavContext } from './NavigationContext';\n\nimport { getInitials } from './helpers';\nimport styles from './NavigationAvatar.module.scss';\n\nexport interface NavigationAvatarProps {\n  /** Apply CSS class to the container. */\n  className?: Parameters<typeof cx>[0];\n  /** If `true`, it will display its collapse state. */\n  isCollapsed?: boolean;\n  /** The name of the account user. */\n  name: string;\n  /** The url for the avatar image. If `undefined`, will display the full name initials. */\n  src?: string;\n}\n\nexport const NavigationAvatar: React.FC<NavigationAvatarProps> = ({\n  className,\n  name,\n}) => {\n  const { isCollapsed } = useNavContext();\n\n  return (\n    <div className={cx(styles.avatarGroup, className)}>\n      <div className={cx(styles.avatar)}>\n        <Text\n          size={12}\n          as='span'\n          weight='extraBold'\n          contrast='inverse-high'\n          className={styles.initials}\n        >\n          {getInitials(name)}\n        </Text>\n      </div>\n      {!isCollapsed && <div>{name}</div>}\n    </div>\n  );\n};\n\nexport default NavigationAvatar;\nexport { styles };\n","import React from 'react';\nimport cx from 'classnames';\n\nimport Text from '../Text';\nimport Touchable from '../Touchable';\nimport Switch from '../Icons/Switch';\n\nimport styles from './NavigationProfileSwitcher.module.scss';\n\nexport interface NavigationProfileSwitcherProps {\n  /** Apply CSS class to the container. */\n  className?: Parameters<typeof cx>[0];\n  /** Apply CSS class to the img container. */\n  imgWrapperClassName?: Parameters<typeof cx>[0];\n  /** Name of the team profile. */\n  name: string;\n  /** The function that will be called when the element is clicked. */\n  onClick: () => void;\n  /** Image source for profile avatar. */\n  src?: string;\n}\n\nexport const NavigationProfileSwitcher: React.FC<NavigationProfileSwitcherProps> = ({\n  className,\n  src,\n  imgWrapperClassName,\n  name,\n  onClick,\n}) => {\n  return (\n    <div className={cx(className)}>\n      <Touchable onClick={onClick} className={styles.teamSwitcher}>\n        <div className={cx(styles.imgWrapper, imgWrapperClassName)}>\n          {src === undefined ? (\n            <Text\n              as='span'\n              contrast='high'\n              weight='semiBold'\n              className={styles.initials}\n            >\n              {name.split('')[0]}\n            </Text>\n          ) : (\n            <img src={src} alt={name} className={styles.img} />\n          )}\n        </div>\n        <div className={styles.nameWrapper}>\n          <Text size={14} weight='semiBold' as='span'>\n            {name}\n          </Text>\n        </div>\n        <div className={styles.switcherIconWrapper}>\n          <Switch />\n        </div>\n      </Touchable>\n    </div>\n  );\n};\n\nexport default NavigationProfileSwitcher;\nexport { styles };\n","import React, { ComponentType } from 'react';\nimport cx from 'classnames';\n\nimport PrimaryLink from '../PrimaryLink';\nimport IconButton from '../IconButton';\nimport ChevronRightS1 from '../Icons/ChevronRightS1';\nimport ChevronUpS1 from '../Icons/ChevronUpS1';\nimport ChevronDownS1 from '../Icons/ChevronDownS1';\nimport { useNavContext } from './NavigationContext';\n\nimport styles from './NavigationItem.module.scss';\n\nexport interface NavigationItemProps {\n  /** Children that will be displayed in an accordion if `variant=\"expandable\"`.  */\n  children?: React.ReactNode;\n  /** Apply CSS class to the container. */\n  className?: Parameters<typeof cx>[0];\n  /** The icon that appears before the `label`. */\n  icon?: React.ReactElement;\n  /** If `true`, will apply the active state to `Navigation.Item`. */\n  isActive?: boolean;\n  /** If `true` and `variant=\"expandable\"`, will show nested items. */\n  isExpanded?: boolean;\n  /** The label for the `Navigation.Item`. */\n  label: string;\n  /** The function that will be called when the `Navigation.Item` is clicked. This will only apply for `variant=\"default\"`, `variant=\"expandable\"`, or `variant=\"drillIn\"`. */\n  onClick?: () => void;\n  /** If `variant=\"default\"`, will navigate to the destination route when clicked. */\n  to?: string;\n  /** Select between different interactive types of `Navigation.Item`.  */\n  variant?: 'default' | 'nestedLink' | 'expandable' | 'drillIn';\n  /** Component that will wrap around `Navigation.Item`. In most cases, it would be `Link` from React Router or any other framework. */\n  component?: ComponentType;\n}\n\nexport const NavigationItem: React.FC<NavigationItemProps> = ({\n  children,\n  className,\n  component,\n  icon,\n  isActive = false,\n  isExpanded,\n  label,\n  onClick,\n  to,\n  variant = 'default',\n}) => {\n  const { isCollapsed, toggleCollapse } = useNavContext();\n\n  if (isCollapsed && icon) {\n    return (\n      <IconButton\n        accessibilityLabel={label}\n        icon={icon}\n        className={cx(\n          styles.navItem,\n          isActive && styles.isActive,\n          isCollapsed && styles.isCollapsed,\n        )}\n        wrapperClassName={styles.navItemBtnWrapper}\n        onClick={() => toggleCollapse()}\n      />\n    );\n  }\n  if (variant === 'drillIn') {\n    return (\n      <PrimaryLink\n        icon={icon}\n        iconClassName={styles.navItemPrefixIcon}\n        className={cx(\n          styles.navItem,\n          styles.navItemBtn,\n          isActive && styles.isActive,\n          className,\n        )}\n        onClick={onClick}\n      >\n        <div className={styles.navItemWrapper}>\n          {label}\n          <div className={styles.navItemSuffix}>\n            <ChevronRightS1 />\n          </div>\n        </div>\n      </PrimaryLink>\n    );\n  }\n  if (variant === 'expandable') {\n    return (\n      <>\n        <PrimaryLink\n          icon={icon}\n          iconClassName={styles.navItemPrefixIcon}\n          className={cx(\n            styles.navItem,\n            styles.navItemBtn,\n            isActive && styles.isActive,\n            className,\n          )}\n          onClick={onClick}\n        >\n          <div className={styles.navItemWrapper}>\n            {label}\n            <div className={styles.navItemSuffix}>\n              {isExpanded ? <ChevronUpS1 /> : <ChevronDownS1 />}\n            </div>\n          </div>\n        </PrimaryLink>\n        {isExpanded && children}\n      </>\n    );\n  }\n  if (variant === 'nestedLink') {\n    return (\n      <PrimaryLink\n        component={component}\n        to={to}\n        hasIcon={false}\n        iconClassName={styles.navItemPrefixIcon}\n        className={cx(\n          styles.navItem,\n          styles.navItemNestedLink,\n          to && isActive && styles.isActive,\n          className,\n        )}\n      >\n        {label}\n      </PrimaryLink>\n    );\n  }\n  return (\n    <PrimaryLink\n      component={component}\n      to={to}\n      icon={icon ? icon : undefined}\n      iconClassName={styles.navItemPrefixIcon}\n      hasIcon={false}\n      className={cx(\n        styles.navItem,\n        styles.navItemLink,\n        to && isActive && styles.isActive,\n        className,\n      )}\n    >\n      {label}\n    </PrimaryLink>\n  );\n};\n\nexport default NavigationItem;\nexport { styles };\n","import React from 'react';\nimport cx from 'classnames';\n\nimport PrimaryLink from '../PrimaryLink';\n\nimport styles from './NavigationDrillIn.module.scss';\n\nexport interface NavigationDrillInProps {\n  /** Should contain `Navigation.Item` and `Navigation.Group`.*/\n  children?: React.ReactNode;\n  /** Apply CSS class to the container. */\n  className?: Parameters<typeof cx>[0];\n  /** Function that will be called when the back button is clicked. */\n  onBack?: () => void;\n}\n\nexport const NavigationDrillIn: React.FC<NavigationDrillInProps> = ({\n  children,\n  className,\n  onBack,\n}) => {\n  return (\n    <div className={cx(styles.drillIn, className)}>\n      <PrimaryLink left size={14} onClick={onBack} className={styles.backBtn}>\n        Back<span className='visually-hidden'>to main navigation</span>\n      </PrimaryLink>\n      {children}\n    </div>\n  );\n};\n\nexport default NavigationDrillIn;\nexport { styles };\n","import React from 'react';\nimport cx from 'classnames';\n\nimport NavigationHeader, { NavigationHeaderProps } from './NavigationHeader';\nimport NavigationBody, { NavigationBodyProps } from './NavigationBody';\nimport NavigationFooter, { NavigationFooterProps } from './NavigationFooter';\nimport NavigationGroup, { NavigationGroupProps } from './NavigationGroup';\nimport NavigationAvatar, { NavigationAvatarProps } from './NavigationAvatar';\nimport NavigationProfileSwitcher, {\n  NavigationProfileSwitcherProps,\n} from './NavigationProfileSwitcher';\nimport NavigationItem, { NavigationItemProps } from './NavigationItem';\nimport NavigationDrillIn, { NavigationDrillInProps } from './NavigationDrillIn';\n\nimport { useNavContext, NavContext } from './NavigationContext';\n\nimport styles from './Navigation.module.scss';\n\nexport interface NavigationComposition {\n  Header: React.FC<NavigationHeaderProps>;\n  Body: React.FC<NavigationBodyProps>;\n  Footer: React.FC<NavigationFooterProps>;\n  Group: React.FC<NavigationGroupProps>;\n  Avatar: React.FC<NavigationAvatarProps>;\n  ProfileSwitcher: React.FC<NavigationProfileSwitcherProps>;\n  Item: React.FC<NavigationItemProps>;\n  DrillIn: React.FC<NavigationDrillInProps>;\n}\n\nexport interface Props {\n  /** Children should contain `Navigation.Header`, `Navigation.Body`, and `Navigation.Footer`  */\n  children?: React.ReactNode;\n  /** Apply CSS class to the container. */\n  className?: Parameters<typeof cx>[0];\n}\n\nexport const Navigation: React.FC<Props> & NavigationComposition = ({\n  children,\n  className,\n}) => {\n  const { isCollapsed, isMobileNavOpen } = useNavContext();\n\n  return (\n    <div\n      className={cx(\n        styles.nav,\n        isCollapsed && styles.isCollapsed,\n        isMobileNavOpen && styles.isMobileNavOpen,\n        className,\n      )}\n    >\n      {children}\n    </div>\n  );\n};\n\nNavigation.Header = NavigationHeader;\nNavigation.Body = NavigationBody;\nNavigation.Footer = NavigationFooter;\nNavigation.Group = NavigationGroup;\nNavigation.Avatar = NavigationAvatar;\nNavigation.ProfileSwitcher = NavigationProfileSwitcher;\nNavigation.Item = NavigationItem;\nNavigation.DrillIn = NavigationDrillIn;\n\nexport default Navigation;\nexport { styles, NavContext };\n","import React from 'react';\nimport cx from 'classnames';\n\nimport Text from '../Text';\n\nimport { useNavContext } from './NavigationContext';\n\nimport styles from './NavigationGroup.module.scss';\n\nexport interface NavigationGroupProps {\n  /** Should be a `IconButton` that executes an action when clicked. */\n  action?: React.ReactNode;\n  /** Defines a group of relative `Navigation.Items`.  */\n  children?: React.ReactNode;\n  /** Apply CSS class to the container. */\n  className?: Parameters<typeof cx>[0];\n  /** Label for the `Navigation.Group`. */\n  label?: string;\n}\n\nexport const NavigationGroup: React.FC<NavigationGroupProps> = ({\n  action,\n  children,\n  className,\n  label,\n}) => {\n  const { isCollapsed } = useNavContext();\n\n  return (\n    <div\n      className={cx(\n        styles.navGroup,\n        isCollapsed && styles.isCollapsed,\n        className,\n      )}\n    >\n      {label && (\n        <div className={styles.labelGroup}>\n          <div>\n            <Text\n              size={12}\n              font='mono'\n              weight='bold'\n              as='span'\n              className={cx(styles.label, isCollapsed && 'visually-hidden')}\n              casing='uppercase'\n            >\n              {label}\n            </Text>\n          </div>\n          {!isCollapsed && <div className={styles.actionWrapper}>{action}</div>}\n        </div>\n      )}\n      <div\n        className={cx(\n          styles.navItemContainer,\n          isCollapsed && styles.isCollapsed,\n          className,\n        )}\n      >\n        {children}\n      </div>\n    </div>\n  );\n};\n\nexport default NavigationGroup;\nexport { styles };\n","export function getInitials(fullName: string) {\n  const createInitials = fullName\n    .split(' ')\n    .map(word => word.slice(0, 1))\n    .join('');\n\n  return createInitials;\n}\n"],"names":["NavContext","createContext","isCollapsed","toggleCollapse","isMobileNavOpen","toggleMobileNav","useNavContext","useContext","Navigation","_a","children","className","_b","React","cx","styles","nav","Header","isSmall","useBreakpoints","IconButton","accessibilityLabel","icon","SidebarShow","SidebarHide","onClick","CloseS1","MenuS2","Body","Footer","Group","action","label","Text","size","font","weight","as","casing","Avatar","name","contrast","split","map","word","slice","join","ProfileSwitcher","src","imgWrapperClassName","Touchable","undefined","alt","Switch","Item","component","isActive","isExpanded","to","_c","variant","_d","wrapperClassName","PrimaryLink","iconClassName","ChevronRightS1","ChevronUpS1","ChevronDownS1","hasIcon","DrillIn","onBack","left"],"mappings":"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"}