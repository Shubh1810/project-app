{"version":3,"file":"index.js","sources":["../../src/Table/TableHead.tsx","../../src/Table/TableHeadCell.tsx","../../src/Table/TableBody.tsx","../../src/Table/TableRow.tsx","../../src/Table/TableCell.tsx","../../src/Table/TableRowExpanded.tsx","../../src/Table/TableExpandedGroup.tsx","../../src/Table/TableExpandedList.tsx","../../src/Table/helpers.ts","../../src/Table/index.tsx"],"sourcesContent":["import React from 'react';\n\nimport { TableRowProps } from './TableRow';\n\nimport styles from './TableHead.module.scss';\n\nexport interface TableHeadProps\n  extends React.HTMLProps<HTMLTableSectionElement> {\n  /** Child of `Table.Head` which should be one or more `Table.Row`. */\n  children:\n    | React.ReactElement<TableRowProps>\n    | React.ReactElement<TableRowProps>[];\n}\n\nexport const TableHead: React.FC<TableHeadProps> = ({ children, ...rest }) => (\n  <thead className={styles.head} {...rest}>\n    {children}\n  </thead>\n);\n\nTableHead.displayName = 'Table.Head';\nexport default TableHead;\n","import React from 'react';\nimport cx from 'classnames';\n\nimport IconButton from '../IconButton';\nimport ArrowUp from '../Icons/ArrowUp';\nimport ArrowDown from '../Icons/ArrowDown';\nimport Switch from '../Icons/Switch';\n\nimport styles from './TableHeadCell.module.scss';\n\nexport interface TableHeadCellProps\n  extends React.HTMLProps<HTMLTableCellElement> {\n  /** Alignment for content in table head cell. This will override the align prop value that is set in the `Table.Cell`. */\n  align?: 'start' | 'center' | 'end';\n  /** Child of `Table.HeadCell` which should be any element. */\n  children: React.ReactNode;\n  /** Disable sort for header. */\n  disableSortBy?: boolean;\n  /** Set the sort order for the table. */\n  sort?: 'none' | 'ascending' | 'descending';\n  /** Adjust the width of the table head cell. */\n  width?: string | number | undefined;\n}\n\nexport const TableHeadCell: React.FC<TableHeadCellProps> = ({\n  children,\n  align = 'start',\n  disableSortBy = true,\n  sort = 'none',\n  width = undefined,\n  className,\n  ...rest\n}) => (\n  <th\n    {...rest}\n    className={cx(styles.header, align && styles[align], className)}\n    style={{ width: width }}\n  >\n    <span className={styles.headerWrapper}>\n      {align !== 'end' ? children : null}\n      {disableSortBy ? null : (\n        <IconButton\n          className={styles.sortBtn}\n          accessibilityLabel={`Toggle Sort ${typeof children === 'string' &&\n            children} column, currently ${sort === 'none' ? 'unsorted' : sort}`}\n          icon={\n            sort !== 'none' ? (\n              sort === 'descending' ? (\n                <ArrowDown />\n              ) : (\n                <ArrowUp />\n              )\n            ) : (\n              <Switch />\n            )\n          }\n        />\n      )}\n      {align === 'end' ? children : null}\n    </span>\n  </th>\n);\n\nTableHeadCell.displayName = 'Table.HeadCell';\nexport default TableHeadCell;\nexport { styles };\n","import React from 'react';\n\nimport { TableRowProps } from './TableRow';\nexport interface TableBodyProps\n  extends React.HTMLProps<HTMLTableSectionElement> {\n  /** Child of `Table.Body` which should be one or more `Table.Row`. */\n  children:\n    | React.ReactElement<TableRowProps>\n    | React.ReactElement<TableRowProps>[];\n}\n\nexport const TableBody: React.FC<TableBodyProps> = ({ children, ...rest }) => (\n  <tbody {...rest}>{children}</tbody>\n);\n\nTableBody.displayName = 'Table.Body';\nexport default TableBody;\n","import React from 'react';\n\nimport { TableCellProps } from './TableCell';\nexport interface TableRowProps extends React.HTMLProps<HTMLTableRowElement> {\n  /** Child of `Table.Row` which should be one or more `Table.Cell`. */\n  children:\n    | React.ReactElement<TableCellProps>\n    | React.ReactElement<TableCellProps>[];\n}\n\nexport const TableRow: React.FC<TableRowProps> = ({\n  children,\n  className,\n  ...rest\n}) => <tr {...rest}>{children}</tr>;\n\nTableRow.displayName = 'Table.Row';\nexport default TableRow;\n","import React from 'react';\n\nimport cx from 'classnames';\n\nimport styles from './TableCell.module.scss';\n\nexport interface TableCellProps extends React.HTMLProps<HTMLTableCellElement> {\n  /** Child of `Table.Cell` which should be any element. */\n  children: React.ReactNode;\n  /** Dictate how many columns the cell will span. */\n  colSpan?: number;\n  /** Alignment for content in table cell.. */\n  align?: 'start' | 'center' | 'end';\n  /** Change the font within the cell. ðŸš§ This will be removed when Text component gets released.ðŸš§*/\n  font?: 'sans' | 'monospace';\n  /** Add a CSS class to adjust cell content.*/\n  cellWrapperClassName?: Parameters<typeof cx>[0];\n}\n\nexport const TableCell: React.FC<TableCellProps> = ({\n  children,\n  colSpan,\n  align = 'start',\n  font = 'sans',\n  className,\n  cellWrapperClassName,\n  ...rest\n}) => (\n  <td\n    {...rest}\n    className={cx(\n      styles.cell,\n      align && styles[align],\n      font && styles[font],\n      className,\n    )}\n    colSpan={colSpan}\n  >\n    <span className={cx(cellWrapperClassName)}>{children}</span>\n  </td>\n);\n\nTableCell.displayName = 'Table.Cell';\nexport default TableCell;\nexport { styles };\n","import React from 'react';\nimport cx from 'classnames';\n\nimport TableCell from './TableCell';\n\nimport styles from './TableRowExpanded.module.scss';\n\nexport interface TableRowExpandedProps\n  extends React.HTMLProps<HTMLTableRowElement> {\n  /** Child of `Table.RowExpanded` which can be any element. */\n  children: React.ReactNode;\n  /** If true, expanded content will appear. */\n  isExpanded?: boolean;\n  /** Dictate how many columns the cell will span. */\n  colSpan?: number;\n  /** Add a CSS class for cell.*/\n  cellWrapperClassName?: Parameters<typeof cx>[0];\n}\n\nexport const TableRowExpanded: React.FC<TableRowExpandedProps> = ({\n  children,\n  isExpanded = false,\n  colSpan = 1,\n  cellWrapperClassName,\n  ...rest\n}) => {\n  if (isExpanded) {\n    return (\n      <tr {...rest} className={cx(styles.rowExpanded)}>\n        <TableCell colSpan={colSpan} className={cx(cellWrapperClassName)}>\n          {children}\n        </TableCell>\n      </tr>\n    );\n  }\n\n  return null;\n};\n\nTableRowExpanded.displayName = 'Table.RowExpanded';\nexport default TableRowExpanded;\nexport { styles };\n","import React from 'react';\n\nimport styles from './TableExpandedGroup.module.scss';\n\nexport interface TableExpandedGroupProps {\n  /** Child of `Table.RowExpanded` which can be any element. */\n  children: React.ReactNode;\n  /** Dictate how many columns to display for the expanded group. */\n  columns: 1 | 2;\n}\nexport const TableExpandedGroup: React.FC<TableExpandedGroupProps> = ({\n  children,\n  columns = 1,\n}) => {\n  return (\n    <div\n      className={styles.expandedGroup}\n      style={{\n        gridTemplateColumns: `repeat(${columns}, 1fr)`,\n      }}\n    >\n      {children}\n    </div>\n  );\n};\n\nTableExpandedGroup.displayName = 'Table.ExpandedGroup';\nexport default TableExpandedGroup;\nexport { styles };\n","import React from 'react';\n\nimport Label from '../Label';\n\nimport { getObjectProps } from './helpers';\n\nimport styles from './TableExpandedList.module.scss';\n\nexport interface TableExpandedListProps {\n  /** Expanded table content title. */\n  title: string;\n  /** Selected keys from the data. */\n  selectProps: { key: string; accessor: string }[];\n  /** Data rendered within the list. */\n  rows: object;\n}\nexport const TableExpandedList: React.FC<TableExpandedListProps> = ({\n  title,\n  selectProps,\n  rows,\n}) => {\n  const filterData = getObjectProps(selectProps, rows);\n\n  return (\n    <div className={styles.expandedList}>\n      <p className={styles.label}>{title}</p>\n      <dl className={styles.list}>\n        {Object.keys(filterData).map((key, i) => (\n          // TODO: refactor out i\n          <React.Fragment key={i}>\n            <dt className={styles.title}>\n              <Label noIcon>{key}</Label>\n            </dt>\n            <dd className={styles.details}>{filterData[key]}</dd>\n          </React.Fragment>\n        ))}\n      </dl>\n    </div>\n  );\n};\n\nTableExpandedList.displayName = 'Table.ExpandedList';\nexport default TableExpandedList;\nexport { styles };\n","/**\n * Extract specific properties from an object.\n *\n * @param {[]} props - Specific properties wanted from object.\n * @param {object} obj - Original object\n * @returns  {object} Output to object with the specify properties.\n */\n\nexport function getObjectProps(\n  props: { key: string; accessor: string }[],\n  obj: object,\n): {} {\n  const formatProps = props.map(\n    (property: { key: string; accessor: string }) => {\n      if (/\\./.test(property.accessor)) {\n        return { key: property.key, accessor: property.accessor.split('.') };\n      }\n      return property;\n    },\n  );\n\n  return formatProps.reduce((acc, item) => {\n    if (Array.isArray(item.accessor)) {\n      // TODO: recursive function for nested properties\n      acc[item.key] = obj[item.accessor[0]][item.accessor[1]];\n      return acc;\n    }\n\n    acc[item.key] = obj[item.accessor];\n    return acc;\n  }, {});\n}\n","import React from 'react';\nimport cx from 'classnames';\n\nimport useUniqueId from '../utils/useUniqueId';\n\nimport TableHead, { TableHeadProps } from './TableHead';\nimport TableHeadCell, { TableHeadCellProps } from './TableHeadCell';\nimport TableBody, { TableBodyProps } from './TableBody';\nimport TableRow, { TableRowProps } from './TableRow';\nimport TableCell, { TableCellProps } from './TableCell';\nimport TableRowExpanded, { TableRowExpandedProps } from './TableRowExpanded';\nimport TableExpandedGroup, {\n  TableExpandedGroupProps,\n} from './TableExpandedGroup';\nimport TableExpandedList, { TableExpandedListProps } from './TableExpandedList';\n\nimport styles from './Table.module.scss';\nexport interface TableComposition {\n  Head: React.FC<TableHeadProps>;\n  HeadCell: React.FC<TableHeadCellProps>;\n  Body: React.FC<TableBodyProps>;\n  Row: React.FC<TableRowProps>;\n  Cell: React.FC<TableCellProps>;\n  RowExpanded: React.FC<TableRowExpandedProps>;\n  ExpandedGroup: React.FC<TableExpandedGroupProps>;\n  ExpandedList: React.FC<TableExpandedListProps>;\n}\nexport interface Props\n  extends Omit<React.HTMLProps<HTMLTableElement>, 'className'> {\n  /** Value of table which should be a Table.Head and Table.Body.*/\n  children: [\n    React.ReactElement<TableHeadProps>,\n    React.ReactElement<TableBodyProps>,\n  ];\n  /** Accessible name for the Table, which will be visually hidden by default. */\n  label: string;\n  /** Override table styles by adding a className */\n  className?: Parameters<typeof cx>[0];\n}\n\nexport const Table: React.FC<Props> & TableComposition = ({\n  children,\n  className,\n  label,\n  id,\n  ...restProps\n}) => {\n  const uid = useUniqueId();\n\n  return (\n    <table\n      {...restProps}\n      aria-labelledby={uid}\n      className={cx(styles.table, className)}\n    >\n      <caption id={uid} className={cx(styles.caption)}>\n        {label}\n      </caption>\n      {children}\n    </table>\n  );\n};\n\nTable.displayName = 'Table';\n\nTable.Head = TableHead;\nTable.HeadCell = TableHeadCell;\nTable.Body = TableBody;\nTable.Row = TableRow;\nTable.Cell = TableCell;\nTable.RowExpanded = TableRowExpanded;\nTable.ExpandedGroup = TableExpandedGroup;\nTable.ExpandedList = TableExpandedList;\n\nexport default Table;\nexport { styles };\n"],"names":["TableHead","_a","children","rest","React","className","styles","displayName","TableHeadCell","_b","align","_c","disableSortBy","_d","sort","_e","width","undefined","cx","header","style","headerWrapper","IconButton","sortBtn","accessibilityLabel","icon","ArrowDown","ArrowUp","Switch","TableBody","TableRow","TableCell","colSpan","font","cellWrapperClassName","cell","TableRowExpanded","isExpanded","TableExpandedGroup","columns","gridTemplateColumns","TableExpandedList","obj","title","selectProps","rows","filterData","map","property","test","accessor","key","split","reduce","acc","item","Array","isArray","Object","keys","i","Fragment","Label","noIcon","Table","label","restProps","uid","useUniqueId","table","id","caption","Head","HeadCell","Body","Row","Cell","RowExpanded","ExpandedGroup","ExpandedList"],"mappings":"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"}