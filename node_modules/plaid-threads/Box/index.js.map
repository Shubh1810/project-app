{"version":3,"file":"index.js","sources":["../../src/Box/index.tsx"],"sourcesContent":["import React from 'react';\nimport cx from 'classnames';\n\nimport { outputMarginClasses } from '../utils';\n\nimport '../styles/_utils.scss';\nexport interface Props {\n  /** The content for `Box`. */\n  children: React.ReactNode;\n  /** Apply CSS class for `Box` container. */\n  className?: Parameters<typeof cx>[0];\n  /** The HTML tag that should be used to render the `Box`. */\n  as?:\n    | 'div'\n    | 'span'\n    | 'header'\n    | 'nav'\n    | 'section'\n    | 'article'\n    | 'aside'\n    | 'footer';\n  /** Specify the layout of the children */\n  display?:\n    | 'block'\n    | 'inline'\n    | 'inline-block'\n    | 'flex'\n    | 'inline-flex'\n    | 'grid'\n    | 'inline-grid';\n  /** Specify the margin area of all four sides of an element. */\n  m?: 0 | 0.5 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | number;\n  /** Specify the margin area on the top of an element. */\n  mt?: 0 | 0.5 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | number;\n  /** Specify the margin area on the right of an element. */\n  mr?: 0 | 0.5 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | number;\n  /** Specify the margin area on the bottom of an element. */\n  mb?: 0 | 0.5 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | number;\n  /** Specify the margin area on the left of an element. */\n  ml?: 0 | 0.5 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | number;\n  /** Specify the margin area on the left & right of an element. */\n  mx?: 0 | 0.5 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | number;\n  /** Specify the margin area on the top & bottom of an element. */\n  my?: 0 | 0.5 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | number;\n  /** Specify the padding area of all four sides of an element at once. */\n  p?: 0 | 0.5 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | number;\n  /** Specify the padding area on the top of an element. */\n  pt?: 0 | 0.5 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | number;\n  /** Specify the padding area on the right of an element. */\n  pr?: 0 | 0.5 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | number;\n  /** Specify the padding area on the bottom of an element. */\n  pb?: 0 | 0.5 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | number;\n  /** Specify the padding area on the left of an element. */\n  pl?: 0 | 0.5 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | number;\n  /** Specify the padding area on the left & right of an element. */\n  px?: 0 | 0.5 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | number;\n  /** Specify the padding area on the top & bottom of an element. */\n  py?: 0 | 0.5 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | number;\n  /** Set the `place-items` value on all direct children of `Box`. */\n  placeItems?: 'center' | 'start' | 'end' | 'self-start' | 'self-end';\n  /** Set the `align-self` value on all direct children of `Box`. */\n  alignItems?:\n    | 'normal'\n    | 'stretch'\n    | 'center'\n    | 'start'\n    | 'end'\n    | 'flex-start'\n    | 'flex-end';\n  /** Sets the distribution of space between and around content items along the y axis. */\n  alignContent?:\n    | 'normal'\n    | 'center'\n    | 'start'\n    | 'end'\n    | 'flex-start'\n    | 'flex-end'\n    | 'space-between'\n    | 'space-around'\n    | 'space-evenly'\n    | 'stretch';\n  /** Set the `justify-self` value on all direct children of `Box`. */\n  justifyItems?:\n    | 'normal'\n    | 'stretch'\n    | 'center'\n    | 'start'\n    | 'end'\n    | 'flex-start'\n    | 'flex-end'\n    | 'self-start'\n    | 'self-end'\n    | 'left'\n    | 'right';\n  /** Sets the distribution of space between and around content items along the x axis of a `flex` container, and the inline axis of a `grid` container. */\n  justifyContent?:\n    | 'normal'\n    | 'center'\n    | 'start'\n    | 'end'\n    | 'flex-start'\n    | 'flex-end'\n    | 'left'\n    | 'right'\n    | 'space-between'\n    | 'space-around'\n    | 'space-evenly'\n    | 'stretch';\n  /** Sets the way a box is justified inside its alignment container along the x axis. */\n  justifySelf?:\n    | 'normal'\n    | 'stretch'\n    | 'center'\n    | 'start'\n    | 'end'\n    | 'flex-start'\n    | 'flex-end'\n    | 'self-start'\n    | 'self-end'\n    | 'left'\n    | 'right';\n  /** Sets the way a box is justified inside its alignment container along the y axis. */\n  alignSelf?:\n    | 'normal'\n    | 'stretch'\n    | 'center'\n    | 'start'\n    | 'end'\n    | 'flex-start'\n    | 'flex-end'\n    | 'self-start'\n    | 'self-end';\n  /** Sets whether flex items are forced onto one line or can wrap onto multiple lines. */\n  flexWrap?: 'nowrap' | 'wrap' | 'wrap-reverse';\n  /** Set the direction of the flex container. */\n  flexDirection?: 'row' | 'row-reverse' | 'column' | 'column-reverse';\n  /** Shorthand for `flex`. */\n  flex?: string;\n  /** Sets the flex grow for `Box`. */\n  flexGrow?: number;\n  /** Sets the flex shrink for `Box`. */\n  flexShrink?: string;\n  /** Sets the initial size of a flex item. */\n  flexBasis?: number;\n  /** Set the order to lay out an item in a flex or grid container. */\n  order?: number;\n  /** Specify a grid item's size and location within a grid column. */\n  gridColumn?: string;\n  /** Specify a grid item's size and location within a grid row. */\n  gridRow?: string;\n  /** Sets the line names and track sizing functions of the grid rows. */\n  gridTemplateRows?: string;\n  /** Sets the line names and track sizing functions of the grid columns. */\n  gridTemplateColumns?: string;\n  /** Set the size of the  grid row track. */\n  gridAutoRows?: string;\n  /** Set the gutter between rows and columns. Works for both flex and grid layout. */\n  gap?: 0 | 0.5 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | number;\n  /** Set the gutter between columns. Works for both flex and grid layout. */\n  gapX?: 0 | 0.5 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | number;\n  /** Set the gutter between rows. Works for both flex and grid layout. */\n  gapY?: 0 | 0.5 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | number;\n  /** Set the border for all four sides of a `Box`. */\n  border?: 0 | 1;\n  /** Set the border top width for `Box`. */\n  borderTop?: 0 | 1;\n  /** Set the border right width for `Box`. */\n  borderRight?: 0 | 1;\n  /** Set the border bottom width for `Box`. */\n  borderBottom?: 0 | 1;\n  /** Set the border left width for `Box`. */\n  borderLeft?: 0 | 1;\n  /** Set the border width. */\n  borderWidth?: 0 | 1 | 2;\n  /** Set the border color for `Box`. These values are based on the design tokens. */\n  borderColor?:\n    | 'contrast-default'\n    | 'contrast-high'\n    | 'contrast-low'\n    | 'state-default'\n    | 'state-error'\n    | 'state-info'\n    | 'state-success'\n    | 'state-warning'\n    | 'status-default'\n    | 'status-error'\n    | 'status-info'\n    | 'status-success'\n    | 'status-warning';\n  /** Set the border radius. */\n  borderRadius?: 0 | 2;\n  /** Set the background color for `Box`. These values are based on the design tokens. */\n  bgColor?: 'primary' | 'secondary' | 'tertiary' | 'inverse';\n  /** Set the height for `Box`. */\n  height?: string;\n  /** Set the width for `Box`. */\n  width?: string;\n}\n\nexport const Box: React.FC<Props> = ({\n  children,\n  className,\n  as = 'div',\n  display,\n  m,\n  mt,\n  mr,\n  mb,\n  ml,\n  mx,\n  my,\n  p,\n  pt,\n  pr,\n  pb,\n  pl,\n  px,\n  py,\n  placeItems,\n  alignItems,\n  alignContent,\n  justifyItems,\n  justifyContent,\n  justifySelf,\n  alignSelf,\n  flexWrap,\n  flexDirection,\n  flex,\n  flexGrow,\n  flexShrink,\n  flexBasis,\n  order,\n  gridColumn,\n  gridRow,\n  gridTemplateRows,\n  gridTemplateColumns,\n  gridAutoRows,\n  gap,\n  gapX,\n  gapY,\n  border,\n  borderTop,\n  borderRight,\n  borderBottom,\n  borderLeft,\n  borderWidth,\n  borderColor,\n  borderRadius,\n  bgColor,\n  height,\n  width,\n}) => {\n  const Component = as;\n\n  return (\n    <Component\n      className={cx(\n        display && `display-${display}`,\n        m && `m-${m}`,\n        mt && outputMarginClasses(mt, 'mt'),\n        mr && outputMarginClasses(mr, 'mr'),\n        mb && outputMarginClasses(mb, 'mb'),\n        ml && outputMarginClasses(ml, 'ml'),\n        mx && `mx-${mx}`,\n        my && `my-${my}`,\n        p && `p-${p}`,\n        pt && `pt-${pt}`,\n        pr && `pr-${pr}`,\n        pb && `pb-${pb}`,\n        pl && `pl-${pl}`,\n        px && `px-${px}`,\n        py && `py-${py}`,\n        placeItems && `place-items-${placeItems}`,\n        alignItems && `align-items-${alignItems}`,\n        alignContent && `align-content-${alignContent}`,\n        justifyItems && `justify-items-${justifyItems}`,\n        justifyContent && `justify-content-${justifyContent}`,\n        justifySelf && `justify-self-${justifySelf}`,\n        alignSelf && `align-self-${alignSelf}`,\n        flexWrap && `flex-${flexWrap}`,\n        flexDirection && `flex-${flexDirection}`,\n        gap && `gap-${gap}`,\n        gapX && `gap-x-${gap}`,\n        gapY && `gap-y-${gap}`,\n        border && `border-${border}`,\n        borderWidth && `border-width-${borderWidth}`,\n        borderTop && ` border-t-${borderTop}`,\n        borderRight && `border-r-${borderRight}`,\n        borderBottom && `border-b-${borderBottom}`,\n        borderLeft && `border-l-${borderLeft}`,\n        borderColor && `border-color-${borderColor}`,\n        borderRadius && `border-radius-${borderRadius}`,\n        bgColor && `bg-${bgColor}`,\n        className,\n      )}\n      style={{\n        flex,\n        flexGrow,\n        flexShrink,\n        flexBasis,\n        order,\n        gridColumn,\n        gridRow,\n        gridTemplateRows,\n        gridTemplateColumns,\n        gridAutoRows,\n        height,\n        width,\n      }}\n    >\n      {children}\n    </Component>\n  );\n};\n\nBox.displayName = 'Box';\nexport default Box;\n"],"names":["Box","_a","children","className","_b","as","display","m","mt","mr","mb","ml","mx","my","p","pt","pr","pb","pl","px","py","placeItems","alignItems","alignContent","justifyItems","justifyContent","justifySelf","alignSelf","flexWrap","flexDirection","flex","flexGrow","flexShrink","flexBasis","order","gridColumn","gridRow","gridTemplateRows","gridTemplateColumns","gridAutoRows","gap","gapX","gapY","border","borderTop","borderRight","borderBottom","borderLeft","borderWidth","borderColor","borderRadius","bgColor","height","width","Component","React","cx","outputMarginClasses","style","displayName"],"mappings":"6WAuMaA,EAAuB,SAACC,OACnCC,aACAC,cACAC,OAAAC,aAAK,QACLC,YACAC,MACAC,OACAC,OACAC,OACAC,OACAC,OACAC,OACAC,MACAC,OACAC,OACAC,OACAC,OACAC,OACAC,OACAC,eACAC,eACAC,iBACAC,iBACAC,mBACAC,gBACAC,cACAC,aACAC,kBACAC,SACAC,aACAC,eACAC,cACAC,UACAC,eACAC,YACAC,qBACAC,wBACAC,iBACAC,QACAC,SACAC,SACAC,WACAC,cACAC,gBACAC,iBACAC,eACAC,gBACAC,gBACAC,iBACAC,YACAC,YACAC,WAEMC,GAAYjD,EAElB,OACEkD,wBAACD,IACCnD,UAAWqD,UACTlD,GAAW,kBAAWA,GACtBC,GAAK,YAAKA,GACVC,GAAMiD,sBAAoBjD,EAAI,MAC9BC,GAAMgD,sBAAoBhD,EAAI,MAC9BC,GAAM+C,sBAAoB/C,EAAI,MAC9BC,GAAM8C,sBAAoB9C,EAAI,MAC9BC,GAAM,aAAMA,GACZC,GAAM,aAAMA,GACZC,GAAK,YAAKA,GACVC,GAAM,aAAMA,GACZC,GAAM,aAAMA,GACZC,GAAM,aAAMA,GACZC,GAAM,aAAMA,GACZC,GAAM,aAAMA,GACZC,GAAM,aAAMA,GACZC,GAAc,sBAAeA,GAC7BC,GAAc,sBAAeA,GAC7BC,GAAgB,wBAAiBA,GACjCC,GAAgB,wBAAiBA,GACjCC,GAAkB,0BAAmBA,GACrCC,GAAe,uBAAgBA,GAC/BC,GAAa,qBAAcA,GAC3BC,GAAY,eAAQA,GACpBC,GAAiB,eAAQA,GACzBW,GAAO,cAAOA,GACdC,GAAQ,gBAASD,GACjBE,GAAQ,gBAASF,GACjBG,GAAU,iBAAUA,GACpBK,GAAe,uBAAgBA,GAC/BJ,GAAa,oBAAaA,GAC1BC,GAAe,mBAAYA,GAC3BC,GAAgB,mBAAYA,GAC5BC,GAAc,mBAAYA,GAC1BE,GAAe,uBAAgBA,GAC/BC,GAAgB,wBAAiBA,GACjCC,GAAW,aAAMA,GACjBhD,GAEFuD,MAAO,CACL5B,OACAC,WACAC,aACAC,YACAC,QACAC,aACAC,UACAC,mBACAC,sBACAC,eACAa,UACAC,WAGDnD,IAKPF,EAAI2D,YAAc"}