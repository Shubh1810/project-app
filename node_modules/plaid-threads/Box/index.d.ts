import React from 'react';
import cx from 'classnames';
import '../styles/_utils.scss';
export interface Props {
    /** The content for `Box`. */
    children: React.ReactNode;
    /** Apply CSS class for `Box` container. */
    className?: Parameters<typeof cx>[0];
    /** The HTML tag that should be used to render the `Box`. */
    as?: 'div' | 'span' | 'header' | 'nav' | 'section' | 'article' | 'aside' | 'footer';
    /** Specify the layout of the children */
    display?: 'block' | 'inline' | 'inline-block' | 'flex' | 'inline-flex' | 'grid' | 'inline-grid';
    /** Specify the margin area of all four sides of an element. */
    m?: 0 | 0.5 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | number;
    /** Specify the margin area on the top of an element. */
    mt?: 0 | 0.5 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | number;
    /** Specify the margin area on the right of an element. */
    mr?: 0 | 0.5 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | number;
    /** Specify the margin area on the bottom of an element. */
    mb?: 0 | 0.5 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | number;
    /** Specify the margin area on the left of an element. */
    ml?: 0 | 0.5 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | number;
    /** Specify the margin area on the left & right of an element. */
    mx?: 0 | 0.5 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | number;
    /** Specify the margin area on the top & bottom of an element. */
    my?: 0 | 0.5 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | number;
    /** Specify the padding area of all four sides of an element at once. */
    p?: 0 | 0.5 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | number;
    /** Specify the padding area on the top of an element. */
    pt?: 0 | 0.5 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | number;
    /** Specify the padding area on the right of an element. */
    pr?: 0 | 0.5 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | number;
    /** Specify the padding area on the bottom of an element. */
    pb?: 0 | 0.5 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | number;
    /** Specify the padding area on the left of an element. */
    pl?: 0 | 0.5 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | number;
    /** Specify the padding area on the left & right of an element. */
    px?: 0 | 0.5 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | number;
    /** Specify the padding area on the top & bottom of an element. */
    py?: 0 | 0.5 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | number;
    /** Set the `place-items` value on all direct children of `Box`. */
    placeItems?: 'center' | 'start' | 'end' | 'self-start' | 'self-end';
    /** Set the `align-self` value on all direct children of `Box`. */
    alignItems?: 'normal' | 'stretch' | 'center' | 'start' | 'end' | 'flex-start' | 'flex-end';
    /** Sets the distribution of space between and around content items along the y axis. */
    alignContent?: 'normal' | 'center' | 'start' | 'end' | 'flex-start' | 'flex-end' | 'space-between' | 'space-around' | 'space-evenly' | 'stretch';
    /** Set the `justify-self` value on all direct children of `Box`. */
    justifyItems?: 'normal' | 'stretch' | 'center' | 'start' | 'end' | 'flex-start' | 'flex-end' | 'self-start' | 'self-end' | 'left' | 'right';
    /** Sets the distribution of space between and around content items along the x axis of a `flex` container, and the inline axis of a `grid` container. */
    justifyContent?: 'normal' | 'center' | 'start' | 'end' | 'flex-start' | 'flex-end' | 'left' | 'right' | 'space-between' | 'space-around' | 'space-evenly' | 'stretch';
    /** Sets the way a box is justified inside its alignment container along the x axis. */
    justifySelf?: 'normal' | 'stretch' | 'center' | 'start' | 'end' | 'flex-start' | 'flex-end' | 'self-start' | 'self-end' | 'left' | 'right';
    /** Sets the way a box is justified inside its alignment container along the y axis. */
    alignSelf?: 'normal' | 'stretch' | 'center' | 'start' | 'end' | 'flex-start' | 'flex-end' | 'self-start' | 'self-end';
    /** Sets whether flex items are forced onto one line or can wrap onto multiple lines. */
    flexWrap?: 'nowrap' | 'wrap' | 'wrap-reverse';
    /** Set the direction of the flex container. */
    flexDirection?: 'row' | 'row-reverse' | 'column' | 'column-reverse';
    /** Shorthand for `flex`. */
    flex?: string;
    /** Sets the flex grow for `Box`. */
    flexGrow?: number;
    /** Sets the flex shrink for `Box`. */
    flexShrink?: string;
    /** Sets the initial size of a flex item. */
    flexBasis?: number;
    /** Set the order to lay out an item in a flex or grid container. */
    order?: number;
    /** Specify a grid item's size and location within a grid column. */
    gridColumn?: string;
    /** Specify a grid item's size and location within a grid row. */
    gridRow?: string;
    /** Sets the line names and track sizing functions of the grid rows. */
    gridTemplateRows?: string;
    /** Sets the line names and track sizing functions of the grid columns. */
    gridTemplateColumns?: string;
    /** Set the size of the  grid row track. */
    gridAutoRows?: string;
    /** Set the gutter between rows and columns. Works for both flex and grid layout. */
    gap?: 0 | 0.5 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | number;
    /** Set the gutter between columns. Works for both flex and grid layout. */
    gapX?: 0 | 0.5 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | number;
    /** Set the gutter between rows. Works for both flex and grid layout. */
    gapY?: 0 | 0.5 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | number;
    /** Set the border for all four sides of a `Box`. */
    border?: 0 | 1;
    /** Set the border top width for `Box`. */
    borderTop?: 0 | 1;
    /** Set the border right width for `Box`. */
    borderRight?: 0 | 1;
    /** Set the border bottom width for `Box`. */
    borderBottom?: 0 | 1;
    /** Set the border left width for `Box`. */
    borderLeft?: 0 | 1;
    /** Set the border width. */
    borderWidth?: 0 | 1 | 2;
    /** Set the border color for `Box`. These values are based on the design tokens. */
    borderColor?: 'contrast-default' | 'contrast-high' | 'contrast-low' | 'state-default' | 'state-error' | 'state-info' | 'state-success' | 'state-warning' | 'status-default' | 'status-error' | 'status-info' | 'status-success' | 'status-warning';
    /** Set the border radius. */
    borderRadius?: 0 | 2;
    /** Set the background color for `Box`. These values are based on the design tokens. */
    bgColor?: 'primary' | 'secondary' | 'tertiary' | 'inverse';
    /** Set the height for `Box`. */
    height?: string;
    /** Set the width for `Box`. */
    width?: string;
}
export declare const Box: React.FC<Props>;
export default Box;
//# sourceMappingURL=index.d.ts.map