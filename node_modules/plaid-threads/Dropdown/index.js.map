{"version":3,"file":"index.js","sources":["../../src/Dropdown/index.tsx"],"sourcesContent":["import React from 'react';\nimport cx from 'classnames';\n\nimport Touchable, { TouchableProps } from '../Touchable';\nimport Checkmark from '../Icons/Checkmark';\nimport useUniqueId from '../utils/useUniqueId';\n\nimport styles from './Dropdown.module.scss';\n\nexport interface DropdownItem extends TouchableProps {\n  label: string;\n  value: string;\n  icon?: React.ReactElement;\n}\n\nexport interface Props {\n  block?: boolean;\n  children?: Array<React.ReactElement>;\n  className?: Parameters<typeof cx>[0];\n  id?: string;\n  isOpen: boolean;\n  onChange?: (v: DropdownItem) => void;\n  onEscape?: () => void;\n  options?: Array<DropdownItem>;\n  target: React.ReactElement;\n  value?: DropdownItem;\n  wrapperClassName?: Parameters<typeof cx>[0];\n}\n\nexport const Dropdown: React.FC<Props> = ({\n  block,\n  children,\n  className,\n  id,\n  isOpen,\n  onChange,\n  onEscape,\n  options,\n  target,\n  value,\n  wrapperClassName,\n}) => {\n  const ref = React.useRef<HTMLDivElement>(null);\n\n  const uniqueId = useUniqueId('dropdown');\n  // use supplied id, or auto-generated id if not supplied\n  const dropdownId = id || uniqueId;\n\n  React.useEffect(() => {\n    if (isOpen && onEscape) {\n      const clickOutsideHandler = (event: MouseEvent) => {\n        if (\n          ref.current &&\n          event.target instanceof Node &&\n          !ref.current.contains(event.target)\n        ) {\n          onEscape();\n        }\n      };\n      document.addEventListener('click', clickOutsideHandler);\n\n      const escapeKeyHandler = (event: KeyboardEvent) => {\n        if (event.keyCode === 27) {\n          onEscape();\n        }\n      };\n      document.addEventListener('keyup', escapeKeyHandler);\n\n      return () => {\n        document.removeEventListener('click', clickOutsideHandler);\n        document.removeEventListener('keyup', escapeKeyHandler);\n      };\n    }\n\n    return () => {};\n  }, [isOpen, onEscape]);\n\n  return (\n    <div\n      className={cx(\n        styles.dropdownWrapper,\n        block && styles.block,\n        wrapperClassName,\n      )}\n      ref={ref}\n    >\n      {React.cloneElement(target, {\n        'aria-expanded': isOpen,\n        ariaExpanded: isOpen,\n        'aria-haspopup': true,\n        ariaHasPopup: true,\n        'aria-controls': dropdownId,\n        ariaControls: dropdownId,\n      })}\n      <div\n        role='menu'\n        id={dropdownId}\n        className={cx(styles.dropdown, isOpen && styles.isOpen, className)}\n      >\n        <ul className={styles.list}>\n          {options &&\n            !children &&\n            options.map((o, idx) => (\n              <li className={styles.item} key={idx}>\n                <Touchable\n                  {...o}\n                  className={cx(styles.touchable, o.className)}\n                  onClick={() => onChange && onChange(o)}\n                  ariaPressed={value && value.value === o.value}\n                >\n                  <span className={styles.touchableContent}>\n                    {o.icon != null &&\n                      React.cloneElement(o.icon, {\n                        className: cx(o.icon.props.className, styles.icon),\n                      })}\n                    {o.label}\n                  </span>\n                  {value && value.value === o.value && <Checkmark />}\n                </Touchable>\n              </li>\n            ))}\n          {children &&\n            !options &&\n            children.map((c, idx) => (\n              <li className={styles.item} key={idx}>\n                {React.cloneElement(c, {\n                  className: cx(styles.touchable, c.props.className),\n                })}\n              </li>\n            ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n\nDropdown.displayName = 'Dropdown';\nexport default Dropdown;\nexport { styles };\n"],"names":["Dropdown","_a","block","children","className","id","isOpen","onChange","onEscape","options","target","value","wrapperClassName","ref","React","useRef","uniqueId","useUniqueId","dropdownId","useEffect","clickOutsideHandler_1","event","current","Node","contains","document","addEventListener","escapeKeyHandler_1","keyCode","removeEventListener","cx","styles","dropdownWrapper","cloneElement","ariaExpanded","ariaHasPopup","ariaControls","role","dropdown","list","map","o","idx","item","key","Touchable","touchable","onClick","ariaPressed","touchableContent","icon","props","label","Checkmark","c","displayName"],"mappings":"2wHA6BaA,EAA4B,SAACC,OACxCC,UACAC,aACAC,cACAC,OACAC,WACAC,aACAC,aACAC,YACAC,WACAC,UACAC,qBAEMC,EAAMC,UAAMC,OAAuB,MAEnCC,EAAWC,cAAY,YAEvBC,EAAab,GAAMW,EA+BzB,OA7BAF,UAAMK,WAAU,WACd,GAAIb,GAAUE,EAAU,CACtB,IAAMY,EAAsB,SAACC,GAEzBR,EAAIS,SACJD,EAAMX,kBAAkBa,OACvBV,EAAIS,QAAQE,SAASH,EAAMX,SAE5BF,KAGJiB,SAASC,iBAAiB,QAASN,GAEnC,IAAMO,EAAmB,SAACN,GACF,KAAlBA,EAAMO,SACRpB,KAKJ,OAFAiB,SAASC,iBAAiB,QAASC,GAE5B,WACLF,SAASI,oBAAoB,QAAST,GACtCK,SAASI,oBAAoB,QAASF,IAI1C,OAAO,eACN,CAACrB,EAAQE,IAGVM,+BACEV,UAAW0B,UACTC,EAAOC,gBACP9B,GAAS6B,EAAO7B,MAChBU,GAEFC,IAAKA,GAEJC,UAAMmB,aAAavB,EAAQ,CAC1B,gBAAiBJ,EACjB4B,aAAc5B,EACd,iBAAiB,EACjB6B,cAAc,EACd,gBAAiBjB,EACjBkB,aAAclB,IAEhBJ,+BACEuB,KAAK,OACLhC,GAAIa,EACJd,UAAW0B,UAAGC,EAAOO,SAAUhC,GAAUyB,EAAOzB,OAAQF,IAExDU,8BAAIV,UAAW2B,EAAOQ,MACnB9B,IACEN,GACDM,EAAQ+B,KAAI,SAACC,EAAGC,GAAQ,OACtB5B,8BAAIV,UAAW2B,EAAOY,KAAMC,IAAKF,GAC/B5B,wBAAC+B,0BACKJ,GACJrC,UAAW0B,UAAGC,EAAOe,UAAWL,EAAErC,WAClC2C,QAAS,WAAM,OAAAxC,GAAYA,EAASkC,IACpCO,YAAarC,GAASA,EAAMA,QAAU8B,EAAE9B,QAExCG,gCAAMV,UAAW2B,EAAOkB,kBACX,MAAVR,EAAES,MACDpC,UAAMmB,aAAaQ,EAAES,KAAM,CACzB9C,UAAW0B,UAAGW,EAAES,KAAKC,MAAM/C,UAAW2B,EAAOmB,QAEhDT,EAAEW,OAEJzC,GAASA,EAAMA,QAAU8B,EAAE9B,OAASG,wBAACuC,uBAI7ClD,IACEM,GACDN,EAASqC,KAAI,SAACc,EAAGZ,GAAQ,OACvB5B,8BAAIV,UAAW2B,EAAOY,KAAMC,IAAKF,GAC9B5B,UAAMmB,aAAaqB,EAAG,CACrBlD,UAAW0B,UAAGC,EAAOe,UAAWQ,EAAEH,MAAM/C,qBAU1DJ,EAASuD,YAAc"}