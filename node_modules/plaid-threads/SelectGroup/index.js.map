{"version":3,"file":"index.js","sources":["../../src/SelectGroup/index.tsx"],"sourcesContent":["import React from 'react';\nimport cx from 'classnames';\n\nimport Button from '../Button';\n\nimport styles from './SelectGroup.module.scss';\n\n// We expose an API as close to the react-select API as possible, and even use its types\nexport interface SelectGroupOptionsType {\n  label: string;\n  value: any;\n  disabled?: boolean;\n}\n\ninterface CommonSelectGroupProps {\n  className?: Parameters<typeof cx>[0];\n  buttonClassName?: Parameters<typeof cx>[0];\n  unselectedButtonClassName?: Parameters<typeof cx>[0];\n  inline?: boolean;\n  labeledById?: string;\n  options: SelectGroupOptionsType[];\n  small?: boolean;\n  tabIndex?: number;\n}\n\nexport interface SingleSelectGroupProps extends CommonSelectGroupProps {\n  multi?: false;\n  value: SelectGroupOptionsType | null | undefined;\n  onChange: (value: SelectGroupOptionsType) => void;\n}\n\nexport interface MultiSelectGroupProps extends CommonSelectGroupProps {\n  multi: true;\n  value: SelectGroupOptionsType[] | null | undefined;\n  onChange: (value: SelectGroupOptionsType[]) => void;\n}\n\nexport type Props = SingleSelectGroupProps | MultiSelectGroupProps;\n\nconst isMultiOptionSelected = (\n  value: MultiSelectGroupProps['value'],\n  option: SelectGroupOptionsType,\n): boolean =>\n  value != null && Boolean(value.find(v => option.value === v.value));\n\nconst isSingleOptionSelected = (\n  value: SingleSelectGroupProps['value'],\n  option: SelectGroupOptionsType,\n): boolean => value != null && option.value === value.value;\n\nconst multiOptionOnClick = (\n  value: MultiSelectGroupProps['value'],\n  option: SelectGroupOptionsType,\n  selected: boolean,\n  onChange: MultiSelectGroupProps['onChange'],\n) => () =>\n  value != null && selected\n    ? // filter out option from current value as its being unselected\n      onChange(value.filter(v => v.value !== option.value))\n    : // concat option to current value\n      onChange(value != null ? [...value, option] : [option]);\n\nconst singleOptionOnClick = (\n  option: SelectGroupOptionsType,\n  selected: boolean,\n  onChange: SingleSelectGroupProps['onChange'],\n) => () => (selected ? null : onChange(option));\n\n// you lose some type checking when destructuring props that are an intersection type\n// https://github.com/Microsoft/TypeScript/issues/27927#issuecomment-442921711\nexport const SelectGroup: React.FC<Props> = props => (\n  <div\n    role={props.multi ? 'group' : 'radiogroup'}\n    aria-labelledby={props.labeledById}\n    className={cx(styles.selectGroup, props.className)}\n  >\n    {props.options.map((option, i) => {\n      const selected =\n        props.multi === true\n          ? isMultiOptionSelected(props.value, option)\n          : isSingleOptionSelected(props.value, option);\n      const onClick =\n        props.multi === true\n          ? multiOptionOnClick(props.value, option, selected, props.onChange)\n          : singleOptionOnClick(option, selected, props.onChange);\n      return (\n        <Button\n          key={i}\n          role={props.multi ? 'checkbox' : 'radio'}\n          ariaChecked={selected}\n          checked={selected}\n          tabIndex={props.tabIndex != null ? props.tabIndex + i : undefined}\n          className={cx(\n            styles.selectGroupItem,\n            !props.inline && !props.multi && styles.selectGroupItemFlex,\n            props.multi && styles.selectGroupItemMulti,\n            props.buttonClassName,\n            !selected && props.unselectedButtonClassName,\n          )}\n          onClick={onClick}\n          secondary={!selected}\n          disabled={option.disabled}\n          centered\n          inline={props.multi || props.inline}\n          small={props.multi || props.small}\n        >\n          {option.label}\n        </Button>\n      );\n    })}\n  </div>\n);\n\nSelectGroup.displayName = 'SelectGroup';\nexport default SelectGroup;\nexport { styles };\n"],"names":["SelectGroup","props","React","role","multi","labeledById","className","cx","styles","selectGroup","options","map","option","i","selected","value","Boolean","find","v","isMultiOptionSelected","isSingleOptionSelected","onClick","onChange","filter","multiOptionOnClick","singleOptionOnClick","Button","key","ariaChecked","checked","tabIndex","undefined","selectGroupItem","inline","selectGroupItemFlex","selectGroupItemMulti","buttonClassName","unselectedButtonClassName","secondary","disabled","centered","small","label","displayName"],"mappings":"+yDAuCA,IA+BaA,EAA+B,SAAAC,GAAS,OACnDC,+BACEC,KAAMF,EAAMG,MAAQ,QAAU,+BACbH,EAAMI,YACvBC,UAAWC,UAAGC,EAAOC,YAAaR,EAAMK,YAEvCL,EAAMS,QAAQC,KAAI,SAACC,EAAQC,GAC1B,IAAMC,GACY,IAAhBb,EAAMG,MAvCgB,SAC5BW,EACAH,GAEA,OAAS,MAATG,GAAiBC,QAAQD,EAAME,MAAK,SAAAC,GAAK,OAAAN,EAAOG,QAAUG,EAAEH,UAoClDI,CAAsBlB,EAAMc,MAAOH,GAlChB,SAC7BG,EACAH,GACY,OAAS,MAATG,GAAiBH,EAAOG,QAAUA,EAAMA,MAgC1CK,CAAuBnB,EAAMc,MAAOH,GACpCS,GACY,IAAhBpB,EAAMG,MAhCa,SACzBW,EACAH,EACAE,EACAQ,GACG,OAAA,WACH,OAEIA,EAFK,MAATP,GAAiBD,EAEJC,EAAMQ,QAAO,SAAAL,GAAK,OAAAA,EAAEH,QAAUH,EAAOG,SAE5B,MAATA,qCAAoBA,OAAOH,OAAU,CAACA,KAuBzCY,CAAmBvB,EAAMc,MAAOH,EAAQE,EAAUb,EAAMqB,UArBxC,SAC1BV,EACAE,EACAQ,GACG,OAAA,WAAM,OAACR,EAAW,KAAOQ,EAASV,IAkB3Ba,CAAoBb,EAAQE,EAAUb,EAAMqB,UAClD,OACEpB,wBAACwB,UACCC,IAAKd,EACLV,KAAMF,EAAMG,MAAQ,WAAa,QACjCwB,YAAad,EACbe,QAASf,EACTgB,SAA4B,MAAlB7B,EAAM6B,SAAmB7B,EAAM6B,SAAWjB,OAAIkB,EACxDzB,UAAWC,UACTC,EAAOwB,iBACN/B,EAAMgC,SAAWhC,EAAMG,OAASI,EAAO0B,oBACxCjC,EAAMG,OAASI,EAAO2B,qBACtBlC,EAAMmC,iBACLtB,GAAYb,EAAMoC,2BAErBhB,QAASA,EACTiB,WAAYxB,EACZyB,SAAU3B,EAAO2B,SACjBC,YACAP,OAAQhC,EAAMG,OAASH,EAAMgC,OAC7BQ,MAAOxC,EAAMG,OAASH,EAAMwC,OAE3B7B,EAAO8B,YAOlB1C,EAAY2C,YAAc"}