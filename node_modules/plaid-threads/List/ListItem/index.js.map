{"version":3,"file":"index.js","sources":["../../../src/List/ListItem/index.tsx"],"sourcesContent":["import React from 'react';\nimport cx from 'classnames';\n\nimport useUniqueId from '../../utils/useUniqueId';\nimport styles from './ListItem.module.scss';\n\nexport interface Props {\n  /** CSS className for the ListItem */\n  className?: Parameters<typeof cx>[0];\n  /** One or more elements to place in the leftmost container within the ListItem */\n  leadingContents?: React.ReactNode;\n  /** One or more elements to place in the second container from left within the ListItem */\n  leadingTextRows?: React.ReactNode;\n  /** One or more elements to place in the rightmost/trailing container within the ListItem */\n  trailingContentsColumns?: React.ReactNode;\n}\n\nexport const ListItem: React.FC<Props> = ({\n  className,\n  leadingTextRows,\n  leadingContents,\n  trailingContentsColumns,\n}) => {\n  const leadingContentsBase = useUniqueId('leading-contents');\n  const leadingTextRowBase = useUniqueId('leading-text-row');\n  const trailingTextColumnBase = useUniqueId('trailing-text-column');\n\n  return (\n    <div className={cx(styles.listItem, className)}>\n      {leadingContents && (\n        <div className={styles.leadingContents}>\n          {React.Children.map(leadingContents, (column, idx) => (\n            <div\n              className={styles.column}\n              key={`${leadingContentsBase}-${idx}`}\n              data-testid={`${leadingContentsBase}-${idx}`}\n            >\n              {column}\n            </div>\n          ))}\n        </div>\n      )}\n      {leadingTextRows && (\n        <div className={styles.leadingText}>\n          {React.Children.map(\n            leadingTextRows,\n            (row: React.ReactNode, idx: number) => (\n              <div\n                className={cx(styles.row, idx === 1 && styles.spaceBetween)}\n                key={`${leadingTextRowBase}-${idx}`}\n                data-testid={`${leadingTextRowBase}-${idx}`}\n              >\n                {row}\n              </div>\n            ),\n          )}\n        </div>\n      )}\n      {trailingContentsColumns && (\n        <div className={styles.trailingContents}>\n          {React.Children.map(\n            trailingContentsColumns,\n            (col: React.ReactNode, idx: number) => (\n              <div\n                className={styles.column}\n                key={`${trailingTextColumnBase}-${idx}`}\n                data-testid={`${trailingTextColumnBase}-${idx}`}\n              >\n                {col}\n              </div>\n            ),\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nListItem.displayName = 'ListItem';\nexport default ListItem;\nexport { styles };\n"],"names":["ListItem","_a","className","leadingTextRows","leadingContents","trailingContentsColumns","leadingContentsBase","useUniqueId","leadingTextRowBase","trailingTextColumnBase","React","cx","styles","listItem","Children","map","column","idx","key","leadingText","row","spaceBetween","trailingContents","col","displayName"],"mappings":"61GAiBaA,EAA4B,SAACC,OACxCC,cACAC,oBACAC,oBACAC,4BAEMC,EAAsBC,cAAY,oBAClCC,EAAqBD,cAAY,oBACjCE,EAAyBF,cAAY,wBAE3C,OACEG,+BAAKR,UAAWS,UAAGC,EAAOC,SAAUX,IACjCE,GACCM,+BAAKR,UAAWU,EAAOR,iBACpBM,UAAMI,SAASC,IAAIX,GAAiB,SAACY,EAAQC,GAAQ,OACpDP,+BACER,UAAWU,EAAOI,OAClBE,IAAK,UAAGZ,cAAuBW,iBAClB,UAAGX,cAAuBW,IAEtCD,OAKRb,GACCO,+BAAKR,UAAWU,EAAOO,aACpBT,UAAMI,SAASC,IACdZ,GACA,SAACiB,EAAsBH,GAAgB,OACrCP,+BACER,UAAWS,UAAGC,EAAOQ,IAAa,IAARH,GAAaL,EAAOS,cAC9CH,IAAK,UAAGV,cAAsBS,iBACjB,UAAGT,cAAsBS,IAErCG,OAMVf,GACCK,+BAAKR,UAAWU,EAAOU,kBACpBZ,UAAMI,SAASC,IACdV,GACA,SAACkB,EAAsBN,GAAgB,OACrCP,+BACER,UAAWU,EAAOI,OAClBE,IAAK,UAAGT,cAA0BQ,iBACrB,UAAGR,cAA0BQ,IAEzCM,SAUjBvB,EAASwB,YAAc"}