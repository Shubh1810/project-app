{"version":3,"file":"index.js","sources":["../../src/BaseInput/index.tsx"],"sourcesContent":["import React, { FocusEvent, ChangeEvent, KeyboardEvent } from 'react';\nimport cx from 'classnames';\n\nimport AlertError from '../Icons/AlertError';\n\nimport styles from './BaseInput.module.scss';\n\nexport interface InputProps {\n  autoCapitalize?: string;\n  autoComplete?: string;\n  autoCorrect?: string;\n  autoFocus?: boolean;\n  children?: React.ReactNode;\n  className?: Parameters<typeof cx>[0];\n  codeType?: boolean;\n  disabled?: boolean;\n  errorMessage?: string;\n  focused?: boolean;\n  iconButtons?: React.ReactElement[];\n  iconButtonWrapperClassName?: Parameters<typeof cx>[0];\n  id: string;\n  inputClassName?: Parameters<typeof cx>[0];\n  inputMode?:\n    | 'decimal'\n    | 'email'\n    | 'none'\n    | 'numeric'\n    | 'search'\n    | 'tel'\n    | 'text'\n    | 'url';\n  isDarkMode?: boolean;\n  label: string;\n  labelClassName?: Parameters<typeof cx>[0];\n  large?: boolean;\n  maxLength?: number;\n  minLength?: number;\n  name?: string;\n  note?: React.ReactNode;\n  noteIcon?: React.ReactElement;\n  noteId?: string;\n  onBlur?: (event: FocusEvent<HTMLInputElement>) => void;\n  onChange: (event: ChangeEvent<HTMLInputElement>) => void;\n  onFocus?: (event: FocusEvent<HTMLInputElement>) => void;\n  onKeyDown?: (event: KeyboardEvent<HTMLInputElement>) => void;\n  onKeyPress?: (event: KeyboardEvent<HTMLInputElement>) => void;\n  pattern?: string;\n  placeholder?: string;\n  prefix?: (callbacks: {\n    onFocus: () => void;\n    onBlur: () => void;\n  }) => React.ReactElement;\n  prefixClassName?: Parameters<typeof cx>[0];\n  readOnly?: boolean;\n  ref?: any;\n  required?: boolean;\n  value?: string;\n}\n\nexport interface Props extends InputProps {\n  type: string;\n}\n\nexport const BaseInput: React.ForwardRefExoticComponent<Props> = React.forwardRef(\n  (\n    {\n      autoCapitalize,\n      autoComplete,\n      autoCorrect,\n      autoFocus,\n      children,\n      className,\n      codeType,\n      disabled,\n      errorMessage,\n      focused,\n      iconButtons,\n      iconButtonWrapperClassName,\n      id,\n      inputClassName,\n      inputMode,\n      isDarkMode,\n      label,\n      labelClassName,\n      large,\n      maxLength,\n      minLength,\n      name,\n      note,\n      noteIcon,\n      noteId,\n      onBlur,\n      onChange,\n      onFocus,\n      onKeyDown,\n      onKeyPress,\n      pattern,\n      placeholder,\n      prefix,\n      prefixClassName,\n      readOnly,\n      required,\n      type,\n      value,\n    },\n    ref: any,\n  ) => {\n    const floatLabel = Boolean(value || focused || placeholder);\n    const invalid = Boolean(errorMessage);\n    const alertId = `${id}-alert`;\n\n    return (\n      <div\n        className={cx(\n          styles.container,\n          isDarkMode && styles.containerDark,\n          disabled && styles.disabled,\n          large && styles.largeContainer,\n          prefix && styles.containerPrefixed,\n          (errorMessage || note) && styles.hasNoteContainer,\n          className,\n        )}\n      >\n        <label\n          className={cx(\n            styles.label,\n            isDarkMode && styles.labelDark,\n            !floatLabel && large && styles.largeLabel,\n            floatLabel && [\n              styles.floatLabel,\n              isDarkMode && styles.floatLabelDark,\n            ],\n            labelClassName,\n          )}\n          htmlFor={id}\n        >\n          {label}\n        </label>\n        {prefix && (\n          <span className={cx(styles.prefix, prefixClassName)}>\n            {prefix({ onFocus: () => null, onBlur: () => null })}\n          </span>\n        )}\n        <input\n          className={cx(\n            styles.input,\n            inputClassName,\n            value != null && value != '' && styles.hasValue,\n            isDarkMode && styles.inputDark,\n            large && styles.largeInput,\n            invalid && styles.hasError,\n            codeType && styles.codeType,\n          )}\n          {...{\n            autoCapitalize,\n            autoComplete,\n            autoCorrect,\n            autoFocus,\n            disabled,\n            inputMode,\n            maxLength,\n            minLength,\n            name,\n            onBlur,\n            onChange,\n            onFocus,\n            onKeyDown,\n            onKeyPress,\n            pattern,\n            readOnly,\n            ref,\n            required,\n            type,\n            value,\n          }}\n          aria-describedby={invalid || note || noteIcon ? alertId : undefined}\n          aria-invalid={invalid ? 'true' : undefined}\n          id={id}\n          placeholder={placeholder}\n          spellCheck='false'\n        />\n        {iconButtons && (\n          <div\n            className={cx(iconButtonWrapperClassName, styles.iconButtonWrapper)}\n          >\n            {iconButtons.map((iconButton, i) =>\n              iconButton\n                ? React.cloneElement(iconButton, {\n                    className: cx(\n                      iconButton.props.className,\n                      styles.iconButton,\n                    ),\n                    key: i,\n                  })\n                : null,\n            )}\n          </div>\n        )}\n        {invalid ? (\n          <InputAlert id={alertId} isDarkMode={isDarkMode}>\n            {errorMessage}\n          </InputAlert>\n        ) : (\n          (note || noteIcon) && (\n            <InputNote id={alertId} noteIcon={noteIcon} noteId={noteId}>\n              {note}\n            </InputNote>\n          )\n        )}\n        {children}\n      </div>\n    );\n  },\n);\n\nexport const InputAlert: React.FC<Pick<Props, 'id' | 'isDarkMode'>> = ({\n  children,\n  id,\n  isDarkMode,\n}) => (\n  <span className={cx(styles.noteContainer)} role='alert' id={id}>\n    <AlertError\n      accessibilityLabel='Error'\n      className={cx(styles.noteIcon, styles.errorIcon)}\n    />\n    <span className={cx(styles.note, isDarkMode && styles.noteDark)}>\n      {children}\n    </span>\n  </span>\n);\n\nexport const InputNote: React.FC<Pick<\n  Props,\n  'id' | 'noteIcon' | 'noteId' | 'isDarkMode'\n>> = ({ children, id, noteIcon, noteId, isDarkMode }) => (\n  <span id={noteId || id} className={styles.noteContainer}>\n    {noteIcon &&\n      React.cloneElement(noteIcon, {\n        className: cx(styles.noteIcon, noteIcon.props.className),\n      })}\n    <span className={cx(styles.note, isDarkMode && styles.noteDark)}>\n      {children}\n    </span>\n  </span>\n);\n\nBaseInput.displayName = 'BaseInput';\nexport default BaseInput;\nexport { styles };\n"],"names":["BaseInput","React","forwardRef","_a","ref","autoCapitalize","autoComplete","autoCorrect","autoFocus","children","className","codeType","disabled","errorMessage","focused","iconButtons","iconButtonWrapperClassName","id","inputClassName","inputMode","isDarkMode","label","labelClassName","large","maxLength","minLength","name","note","noteIcon","noteId","onBlur","onChange","onFocus","onKeyDown","onKeyPress","pattern","placeholder","prefix","prefixClassName","readOnly","required","type","value","floatLabel","Boolean","invalid","alertId","cx","styles","container","containerDark","largeContainer","containerPrefixed","hasNoteContainer","labelDark","largeLabel","floatLabelDark","htmlFor","input","hasValue","inputDark","largeInput","hasError","undefined","spellCheck","iconButtonWrapper","map","iconButton","i","cloneElement","props","key","InputAlert","InputNote","noteContainer","role","AlertError","accessibilityLabel","errorIcon","noteDark","displayName"],"mappings":"8YA+DaA,EAAoDC,UAAMC,YACrE,SACEC,EAwCAC,OAvCEC,mBACAC,iBACAC,gBACAC,cACAC,aACAC,cACAC,aACAC,aACAC,iBACAC,YACAC,gBACAC,+BACAC,OACAC,mBACAC,cACAC,eACAC,UACAC,mBACAC,UACAC,cACAC,cACAC,SACAC,SACAC,aACAC,WACAC,WACAC,aACAC,YACAC,cACAC,eACAC,YACAC,gBACAC,WACAC,oBACAC,aACAC,aACAC,SACAC,UAIIC,EAAaC,QAAQF,GAAS5B,GAAWsB,GACzCS,EAAUD,QAAQ/B,GAClBiC,EAAU,UAAG7B,YAEnB,OACEhB,+BACES,UAAWqC,UACTC,aAAOC,UACP7B,GAAc4B,aAAOE,cACrBtC,GAAYoC,aAAOpC,SACnBW,GAASyB,aAAOG,eAChBd,GAAUW,aAAOI,mBAChBvC,GAAgBc,IAASqB,aAAOK,iBACjC3C,IAGFT,iCACES,UAAWqC,UACTC,aAAO3B,MACPD,GAAc4B,aAAOM,WACpBX,GAAcpB,GAASyB,aAAOO,WAC/BZ,GAAc,CACZK,aAAOL,WACPvB,GAAc4B,aAAOQ,gBAEvBlC,GAEFmC,QAASxC,GAERI,GAEFgB,GACCpC,gCAAMS,UAAWqC,UAAGC,aAAOX,OAAQC,IAChCD,EAAO,CAAEL,QAAS,WAAM,OAAA,MAAMF,OAAQ,WAAM,OAAA,SAGjD7B,4CACES,UAAWqC,UACTC,aAAOU,MACPxC,EACS,MAATwB,GAA0B,IAATA,GAAeM,aAAOW,SACvCvC,GAAc4B,aAAOY,UACrBrC,GAASyB,aAAOa,WAChBhB,GAAWG,aAAOc,SAClBnD,GAAYqC,aAAOrC,WAEjB,CACFN,iBACAC,eACAC,cACAC,YACAI,WACAO,YACAK,YACAC,YACAC,OACAI,SACAC,WACAC,UACAC,YACAC,aACAC,UACAI,WACAnC,MACAoC,WACAC,OACAC,6BAEgBG,GAAWlB,GAAQC,EAAWkB,OAAUiB,iBAC5ClB,EAAU,YAASkB,EACjC9C,GAAIA,EACJmB,YAAaA,EACb4B,WAAW,WAEZjD,GACCd,+BACES,UAAWqC,UAAG/B,EAA4BgC,aAAOiB,oBAEhDlD,EAAYmD,KAAI,SAACC,EAAYC,GAC5B,OAAAD,EACIlE,UAAMoE,aAAaF,EAAY,CAC7BzD,UAAWqC,UACToB,EAAWG,MAAM5D,UACjBsC,aAAOmB,YAETI,IAAKH,IAEP,SAITvB,EACC5C,wBAACuE,GAAWvD,GAAI6B,EAAS1B,WAAYA,GAClCP,IAGFc,GAAQC,IACP3B,wBAACwE,GAAUxD,GAAI6B,EAASlB,SAAUA,EAAUC,OAAQA,GACjDF,GAINlB,MAMI+D,EAAyD,SAACrE,OACrEM,aACAQ,OACAG,eACI,OACJnB,gCAAMS,UAAWqC,UAAGC,aAAO0B,eAAgBC,KAAK,QAAQ1D,GAAIA,GAC1DhB,wBAAC2E,cACCC,mBAAmB,QACnBnE,UAAWqC,UAAGC,aAAOpB,SAAUoB,aAAO8B,aAExC7E,gCAAMS,UAAWqC,UAAGC,aAAOrB,KAAMP,GAAc4B,aAAO+B,WACnDtE,KAKMgE,EAGR,SAACtE,OAAEM,aAAUQ,OAAIW,aAAUC,WAAQT,eAAiB,OACvDnB,gCAAMgB,GAAIY,GAAUZ,EAAIP,UAAWsC,aAAO0B,eACvC9C,GACC3B,UAAMoE,aAAazC,EAAU,CAC3BlB,UAAWqC,UAAGC,aAAOpB,SAAUA,EAAS0C,MAAM5D,aAElDT,gCAAMS,UAAWqC,UAAGC,aAAOrB,KAAMP,GAAc4B,aAAO+B,WACnDtE,KAKPT,EAAUgF,YAAc"}